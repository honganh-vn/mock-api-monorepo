directive @binding(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION directive @secured(sub: String, object: String, act: SecuredAction) on FIELD_DEFINITION directive @staffSecured(sub: String, object: String, act: SecuredAction) on FIELD_DEFINITION directive @sellerSecured(sub: String, object: String, act: SecuredAction) on FIELD_DEFINITION directive @goField(forceResolver: Boolean, name: String, omitField: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION enum SecuredAction { VIEW CREATE UPDATE DELETE } # Root Query type Query { versionQuery: VersionQuery @goField(forceResolver: true) linkQuery: LinkQuery @goField(forceResolver: true) # queries for seller user sellerQuery: UserSellerQuery @goField(forceResolver: true) @sellerSecured accountingVoucher: AccountingVoucherQuery @goField(forceResolver: true) @staffSecured role: RoleQuery @goField(forceResolver: true) @staffSecured permission: PermissionQuery @goField(forceResolver: true) @staffSecured # users user: UserQuery @goField(forceResolver: true) @staffSecured city: CityQuery @goField(forceResolver: true) @staffSecured district: DistrictQuery @goField(forceResolver: true) @staffSecured # locations ward: WardQuery @goField(forceResolver: true) @staffSecured department: DepartmentQuery @goField(forceResolver: true) @staffSecured bank: BankQuery @goField(forceResolver: true) @staffSecured # banks seller: SellerQuery @goField(forceResolver: true) @staffSecured sellerLevel: SellerLevelQuery @goField(forceResolver: true) @staffSecured contact: ContactQuery @goField(forceResolver: true) @staffSecured warehouse: WarehouseQuery @goField(forceResolver: true) @staffSecured region: RegionQuery @goField (forceResolver: true) product: ProductQuery @goField(forceResolver: true) @staffSecured uom: UomQuery @goField(forceResolver: true) @staffSecured productGroup: ProductGroupQuery @goField(forceResolver: true) @staffSecured category: CategoryQuery @goField(forceResolver: true) @staffSecured attribute: AttributeQuery @goField(forceResolver: true) @staffSecured manufacturer: ManufacturerQuery @goField(forceResolver: true) @staffSecured branch: BranchQuery @goField(forceResolver: true) @staffSecured brand: BrandQuery @goField(forceResolver: true) @staffSecured wallet: WalletQuery @goField(forceResolver: true) @staffSecured walletTransaction: WalletTransactionQuery @goField(forceResolver: true) @staffSecured cart: CartQuery @goField(forceResolver: true) @staffSecured order: OrderQuery @goField(forceResolver: true) orderReconciliation: OrderReconciliationQuery @goField(forceResolver: true) shippingProvider: ShippingProviderQuery @goField(forceResolver: true) notification: NotificationQuery @goField(forceResolver: true) @staffSecured saleChannel :SaleChannelQuery @goField(forceResolver: true) @staffSecured # promotion promotionCampaign: PromotionCampaignQuery @goField(forceResolver: true) @staffSecured sellerGroup: SellerGroupQuery @goField(forceResolver: true) @staffSecured report : ReportQuery @goField(forceResolver: true) @staffSecured warranty: WarrantyNoteQuery @goField(forceResolver: true) @staffSecured warrantyRequest: WarrantyRequestQuery @goField(forceResolver: true) @staffSecured withdrawMoney: WithdrawMoneyRequestQuery @goField(forceResolver: true) serialImportNotes : SerialImportNotesQuery @goField(forceResolver: true) potentialCustomer : PotentialCustomerQuery @goField(forceResolver: true) @staffSecured provider : ProviderQuery @goField(forceResolver: true) ## declare Pagination Provider priceBidSession : PriceBidSessionQuery @goField(forceResolver: true) serialExportNotes : SerialExportNoteQuery @goField(forceResolver: true) serial : SerialQuery @goField(forceResolver: true) platform: PlatformQuery @goField(forceResolver: true) purchaseOrder: PurchaseOrderQuery @goField(forceResolver: true) @staffSecured #import requests importRequests : ImportRequestQuery @goField(forceResolver: true) campaign: CampaignQuery @goField(forceResolver: true) } type UserSellerQuery { user: SellerUserQuery @goField(forceResolver: true) contact: SellerContactQuery @goField(forceResolver: true) configuration: ConfigurationQuery @goField(forceResolver: true) @sellerSecured brand: SellerBrandQuery @goField(forceResolver: true) product: SellerProductQuery @goField(forceResolver: true) @sellerSecured productCollection: SellerProductCollectionQuery @goField(forceResolver: true) @sellerSecured category: SellerCategoryQuery @goField(forceResolver: true) region: RegionQuery @goField (forceResolver: true) banner: SellerBannerQuery @goField(forceResolver: true) notification: NotificationQuery @goField(forceResolver: true) cart: SellerCartQuery @goField(forceResolver: true) order: SellerOrderQuery @goField(forceResolver: true) orderReconcilation: SellerOrderReconcilationQuery @goField(forceResolver: true) city: CityQuery @goField(forceResolver: true) district: DistrictQuery @goField(forceResolver: true) customer: CustomerQuery @goField(forceResolver: true) # locations ward: WardQuery @goField(forceResolver: true) bankAccount: BankAccountQuery @goField(forceResolver: true) shipping: ShippingProviderQuery @goField(forceResolver: true) withdrawMoney: WithdrawMoneyRequestSellerQuery @goField(forceResolver: true) priceBidSession : PriceBidSessionSellerQuery @goField(forceResolver: true) platform: PlatformQuery @goField(forceResolver: true) # campaign campaign: SellerCampaignQuery @goField(forceResolver: true) auctionCampaign: SellerAuctionCampaignQuery @goField(forceResolver: true) promotion : PromotionCampaignQuery @goField(forceResolver: true) } # Root Mutation type Mutation { # mutations for seller user sellerOps: UserSellerOps @goField(forceResolver: true) accountingVoucher: AccountingVoucherOps @goField(forceResolver: true) @staffSecured auth: AuthOps @goField(forceResolver: true) image: ImageOps @goField(forceResolver: true) file: FileOps @goField(forceResolver: true) role: RoleOps @goField(forceResolver: true) @staffSecured #users user: UserOps @goField(forceResolver: true) @staffSecured seller: SellerOps @goField(forceResolver: true) @staffSecured # departments department: DepartmentOps @goField(forceResolver: true) @staffSecured #cash on delivery invoice #contact contact: ContactOps @goField(forceResolver: true) @staffSecured #product product: ProductOps @goField(forceResolver: true) @staffSecured productGroup: ProductGroupOps @goField(forceResolver: true) @staffSecured category: CategoryOps @goField(forceResolver: true) @staffSecured attribute: AttributeOps @goField(forceResolver: true) @staffSecured money: TransferOps @goField(forceResolver: true) @staffSecured cart: CartOps @goField(forceResolver: true) @staffSecured order: OrderOps @goField(forceResolver: true) orderReconcilation: OrderReconcilationOps @goField(forceResolver: true) shippingProvider: ShippingProviderOps @goField(forceResolver: true) @staffSecured notification : NotificationOps @goField(forceResolver: true) @staffSecured bankAccount: BankAccountOps @goField(forceResolver: true) @staffSecured sellerGroup: SellerGroupOps @goField(forceResolver: true) @staffSecured warrantyRequest: WarrantyRequestOps @goField(forceResolver: true) @staffSecured withdrawMoney: WithdrawMoneyRequestOps @goField(forceResolver: true) serialImportNotes : SerialImportNotesOps @goField(forceResolver: true) potentialCustomer : PotentialCustomerOps @goField(forceResolver: true) @staffSecured priceBidSession : PriceBidSessionOps @goField(forceResolver: true) serialExportNotes : SerialExportNoteOps @goField(forceResolver: true) brand: BrandOps @goField(forceResolver: true) importRequests: ImportRequestOps @goField(forceResolver: true) purchaseOrder: PurchaseOrderOps @goField(forceResolver: true) @staffSecured chatUser: ChatUserOps @goField(forceResolver: true) @staffSecured serial: SerialOps @goField(forceResolver: true) @staffSecured # campaign campaign: CampaignOps @goField(forceResolver: true) @staffSecured auctionCampaign: AuctionCampaignOps @goField(forceResolver: true) @staffSecured promotionCampaign: PromotionCampaignOps @goField(forceResolver: true) @staffSecured } type UserSellerOps { user: SellerUserOps @goField(forceResolver: true) @sellerSecured contact: SellerContactOps @goField(forceResolver: true) @sellerSecured auth: SellerAuthOps @goField (forceResolver: true) notification : NotificationOps @goField(forceResolver: true) @sellerSecured cart: SellerCartOps @goField(forceResolver: true) @sellerSecured file: FileOps @goField(forceResolver: true) image: ImageOps @goField(forceResolver: true) order: SellerOrderOps @goField(forceResolver: true) @sellerSecured customer : CustomerOps @goField(forceResolver: true) @sellerSecured withdrawMoney: WithdrawMoneyRequestSellerOps @goField(forceResolver: true) priceBidSession : PriceBidSessionSellerOps @goField(forceResolver: true) # campaign campaign: SellerCampaignOps @goField(forceResolver: true) @sellerSecured auctionCampaign: SellerAuctionCampaignOps @goField(forceResolver: true) @sellerSecured promotionCampaign: PromotionCampaignOps @goField(forceResolver: true) @sellerSecured } # Custom Scalar Types scalar Timestamp scalar Uint scalar Uint64 scalar Uint32 scalar Int64 scalar Int32 scalar Upload scalar JSON type AccountingVoucherQuery { get(id : ID!): AccountingVoucher @goField(forceResolver: true) pagination( filters: AccountingVoucherFilters = {}, pagination: PaginationRequest! = {limit: 10, offset: 0}, sort: AccountingVoucherSort! = {by: ID, sortType: DESC}): AccountingVoucherResponse @goField(forceResolver: true) } type AccountingVoucherOps { update(id: ID!, request: AccountingVoucherInput): Boolean! @goField(forceResolver: true) } input AccountingVoucherInput { receiveDate: Timestamp bankAccountID: ID! accountingVoucherType: AccountingVoucherType transferMethod: TransferMethod! expectAmount: Int64 realAmount: Int64! fileUrls: [String!] reason: String } type AccountingVoucher { id: ID! receiveDate: Timestamp code: String! orderID: ID! order: Order @goField(forceResolver: true) bankAccountID: ID bankAccount: BankAccount @goField(forceResolver: true) expectAmount: Int64! deviantAmount : Int64 @goField(forceResolver: true) realAmount: Int64 fileUrls: [String!] accountingVoucherType: AccountingVoucherType! transferMethod: TransferMethod reason: String createdAt : Timestamp! } enum AccountingVoucherStatus { WAITING_FOR_CHECK CHECKED } type TotalAmountOfCheckedStatus { totalExpectAmount : Int64! totalDeviantAmount : Int64! totalRealAmount : Int64! } type AccountingVoucherResponse { total : TotalAmountOfCheckedStatus accountingVouchers: [AccountingVoucher!] paginationData: PaginationData! } input AccountingVoucherFilters { query: String sellerIDs: [ID!] status : AccountingVoucherStatus! timeRange : TimeRangeFilter } input AccountingVoucherSort { by: AccountingVoucherSortBy! sortType: SortType! } enum AccountingVoucherSortBy { ID CREATED_AT RECEIVE_DATE } enum AccountingVoucherType { COD } enum TransferMethod { CASH BANK_TRANSFER } type AttributeQuery { list(req: ListAttributeRequest): [Attribute] @goField(forceResolver: true) get(id: ID!): Attribute @goField(forceResolver: true) } type AttributeOps { create(req: AttributeInput!): Attribute! @goField(forceResolver: true) update(id: ID!, req: AttributeInput!): Boolean! @goField(forceResolver: true) updateStatus(ids: [ID!], isActive: Boolean!): Boolean! @goField(forceResolver: true) } type Attribute { id: ID! name: String! attributeType: AttributeType! isActive: Boolean! isCommon: Boolean! values: [AttributeValue] @goField(forceResolver: true) totalUsedCategory: Int64 @goField(forceResolver: true) } type AttributeValue { id: ID! value: String! } enum AttributeType { PREDEFINED FREE_TEXT } input AttributeInput { name: String! attributeType: AttributeType! isCommon: Boolean! values: [AttributeValueInput] isActive: Boolean } input AttributeValueInput { id: ID value: String } input ListAttributeRequest { query: String isCommon: Boolean isActive: Boolean categoryIDs: [ID!] attributeType: AttributeType } type AuctionCampaignOps { approveAuctionCampaignResult(request: ApproveAuctionCampaignResultRequest!): ApproveAuctionCampaignResultResponse! @goField(forceResolver: true) } type SellerAuctionCampaignOps { createNewBid(request: CreateNewBidRequest): CreateNewBidResponse! @goField(forceResolver: true) cancelBid(request: CancelBidRequest): CancelBidResponse! @goField(forceResolver: true) } type SellerAuctionCampaignQuery { warningWinBid: Boolean! @goField(forceResolver: true) }extend input CreateCampaignRequest { auctionInput: AuctionCampaignInput } input AuctionCampaignInput { formatType: AuctionFormatType! = CLOSE # default auctionCampaignType: AuctionCampaignType! = MONEY_HIGHEST # default auctionItems: [AuctionItemInput!]! } input AuctionItemInput { productID: ID! moneyHighestSetup: AuctionMoneyHighestInput step: Int64! minDeliveryDays: Int64 maxDeliveryDays: Int64 winningSellerCountType: WinningSellerCountType! = ONE_SELLER #default quantityWinningSeller: Int64 } input AuctionMoneyHighestInput { quantity: Int64! startPrice: Int64! reservePrice: Int64! } extend input PaginationCampaignFilters { paginationAuctionCampaignFilter: PaginationAuctionCampaignFilter } input PaginationAuctionCampaignFilter { statuses : [AuctionCampaignStatus!] auctionCampaignTypes: [AuctionCampaignType!] } extend input PaginationCampaignItemsFilters { auctionFilters: PaginationAuctionItemsFilters } input PaginationAuctionItemsFilters { itemType : SellerAuctionItemType! } input AuctionItemResult { auctionItemID: ID! isApproved: Boolean! } input ApproveAuctionCampaignResultRequest { auctionCampaignID: ID! itemResults: [AuctionItemResult!]! } input CreateNewBidRequest { auctionItemID: ID! newBidPrice: Int64! } input CancelBidRequest { auctionBidID: ID! } type PaginationAuctionItemsResponse implements PaginationCampaignItemsResponse{ campaignType: CampaignType! paginationData: PaginationData! # extend for auction sellerItems: [SellerAuctionItem!] } type ApproveAuctionCampaignResultResponse { isSuccess: Boolean! } type CreateNewBidResponse { isSuccess: Boolean! message: String } type CancelBidResponse { isSuccess: Boolean! message: String } type AuctionCampaign implements Campaign { # general campaign info id: ID! #campaign_id name: String! type: CampaignType! startDate: Timestamp! endDate: Timestamp! bannerID: ID banner: Banner @goField(forceResolver: true) shortDescription: String! description: String! saleChannelIDs: [ID!] saleChannels: [SaleChannel!] @goField(forceResolver: true) createdByID: ID! createdBy: User @goField(forceResolver: true) isActive: Boolean! isDisplay: Boolean! cancelReason: CancelCampaignReason cancelNote: String canceledByID: Int64 canceledBy: User @goField(forceResolver: true) canceledAt: Timestamp createdAt: Timestamp! updatedAt: Timestamp! timingStatus: CampaignTimingStatus! @goField(forceResolver: true) # extend for auction auctionType: AuctionCampaignType! status : AuctionCampaignStatus! auctionItems: [StaffAuctionItem!] @goField(forceResolver: true) @staffSecured sellerAuctionItems: [SellerAuctionItem!] @goField(forceResolver: true) @sellerSecured totalBiddedItems: Int64 @goField(forceResolver: true) @staffSecured totalAuctionItems: Int64 @goField(forceResolver: true) resultApprovedAt: Timestamp applicationDeadline: Timestamp # for staff resultApprovedByID: ID! @staffSecured resultApprovedBy: User @goField(forceResolver: true) @staffSecured totalCreatedOrderItems: Int64 @goField(forceResolver: true) @staffSecured totalApprovedItems: Int64 @goField(forceResolver: true) @staffSecured } type GetAuctionCampaignItemDetailResponse implements GetCampaignItemDetailResponse { id: ID! campaignID: ID! campaign: Campaign @goField(forceResolver: true) productID: ID product: Product @goField(forceResolver: true) item: StaffAuctionItem @goField(forceResolver: true) @staffSecured sellerItem: SellerAuctionItem @goField(forceResolver: true) @sellerSecured } type ItemHistoryBySeller { sellerID: ID! seller: Seller @goField(forceResolver: true) latestBidEvent: AuctionBidEvent! fullBidEvents: [AuctionBidEvent!]! } interface AuctionItem { id: ID! auctionCampaignID: ID! auctionCampaign: AuctionCampaign @goField(forceResolver: true) productID: ID! quantity: Int64! originalPrice: Int64! startPrice: Int64! step: Int64! reservePrice: Int64! winningSellerCountType: WinningSellerCountType! quantityWinningSeller: Int64 minimumEstimatedDeliveryTime: Timestamp maximumEstimatedDeliveryTime: Timestamp totalParticipatingSellers: Int64 @goField(forceResolver: true) approvalResult: AuctionItemApprovalResult! approvedAt: Timestamp auctionItemID: ID! campaignItemID: ID! } type StaffAuctionItem implements AuctionItem { id: ID! auctionCampaignID: ID! auctionCampaign: AuctionCampaign @goField(forceResolver: true) productID: ID! quantity: Int64! originalPrice: Int64! startPrice: Int64! step: Int64! reservePrice: Int64! winningSellerCountType: WinningSellerCountType! quantityWinningSeller: Int64 minimumEstimatedDeliveryTime: Timestamp maximumEstimatedDeliveryTime: Timestamp totalParticipatingSellers: Int64 @goField(forceResolver: true) approvalResult: AuctionItemApprovalResult! approvedAt: Timestamp auctionItemID: ID! campaignItemID: ID! # extend for staff product: Product @goField(forceResolver: true) participatingSellers: [Seller] @goField(forceResolver: true) highestBid: AuctionBid @goField(forceResolver: true) itemHistory: [ItemHistoryBySeller!] @goField(forceResolver: true) } type SellerAuctionItem implements AuctionItem { id: ID! # campaignItemID (!= auctionItemID) auctionCampaignID: ID! campaignID: ID! auctionCampaign: AuctionCampaign @goField(forceResolver: true) productID: ID! quantity: Int64! # So luong san pham originalPrice: Int64! startPrice: Int64! # Gia khoi diem step: Int64! reservePrice: Int64! winningSellerCountType: WinningSellerCountType! quantityWinningSeller: Int64 minimumEstimatedDeliveryTime: Timestamp maximumEstimatedDeliveryTime: Timestamp totalParticipatingSellers: Int64 @goField(forceResolver: true) approvalResult: AuctionItemApprovalResult! approvedAt: Timestamp auctionItemID: ID! campaignItemID: ID! # extend for seller product: SellerProduct @goField(forceResolver: true) participantSellerAbbreviations: [String!] @goField(forceResolver: true) currentSellerInterested: Boolean! @goField(forceResolver: true) # todo phase2 currentSellerItemHistory: ItemHistoryBySeller @goField(forceResolver: true) sellerItemInfo: CurrentSellerAuctionItemInfo @goField(forceResolver: true) } type CurrentSellerAuctionItemInfo { auctionType: AuctionCampaignType! latestBidID: ID latestBidStatus: AuctionBidStatus # null -> Khong tham gia latestBidEvent: AuctionBidEvent currentUserNextAction: AuctionItemAction! # Button orderID: ID # Don hang chua item price: Int64 # Gia hien thi cua item wonByOther: WonByOtherInfo # quantity: Int64 # So luong } type WonByOtherInfo { wonBid: AuctionBid wonBidEvent: AuctionBidEvent } type AuctionBid { id: ID! auctionItemID: ID! auctionItem: AuctionItem @goField(forceResolver: true) auctionCampaignID: ID! auctionCampaign: AuctionCampaign @goField(forceResolver: true) auctionType: AuctionCampaignType! status: AuctionBidStatus! sellerID: ID! seller: Seller @goField(forceResolver: true) bidPrice: Int64 @goField(forceResolver: true) # Gia dau # bidQuantity: Int64 @goField(forceResolver: true) # So luong dau } type AuctionBidEvent { id: ID! auctionBidID: ID! auctionBid: AuctionBid @goField(forceResolver: true) createdByID: ID! createdBy: User @goField(forceResolver: true) createdAt: Timestamp! createdByMe: Boolean! @goField(forceResolver: true) action: AuctionBidEventAction! } type AuctionItemAction { actionButtonType: AuctionItemActionButtonType! isActive: Boolean! } enum AuctionItemActionButtonType { CREATE_FIRST_BID # Dau gia ngay (Chua dau gia item lan nao) CREATE_NEW_BID # Dau gia moi CONTACT # Lien he ADD_TO_CART # Them vao gio GO_TO_CART # Di den gio hang GO_TO_ORDER # Di den don hang } enum AuctionFormatType { CLOSE OPEN } enum AuctionItemApprovalResult { PENDING APPROVED REJECTED } enum AuctionBidEventAction { CREATE_NEW_BID CANCEL } enum AuctionBidStatus { PENDING WON LOST SELF_CANCELED INTERNAL_REJECTED } enum AuctionCampaignType { MONEY_HIGHEST MONEY_LOWEST_UNIQUE QUANTITY } enum WinningSellerCountType { ONE_SELLER MULTIPLE_SELLERS } enum AuctionCampaignStatus { UPCOMING ONGOING AWAITING_APPROVAL ORDERABLE ENDED CANCELLED } enum SellerAuctionItemType { UPCOMING ONGOING # MY_IN_BIDDING # Đang đấu giá # MY_RESULTS_PENDING # Chờ kết quả # MY_RESULTS_AVAILABLE # Đã có kết quả # MY_INTERESTED # Quan tâm MY_HISTORY # Lịch sử đấu giá } extend enum PaginationCampaignSortBy { AUCTION_END_TIME AUCTION_APPLICATION_DEADLINE AUCTION_BELONG_TO_CURRENT_SELLER } extend enum PaginationCampaignItemsSortBy { AUCTION_BELONG_TO_CURRENT_SELLER AUCTION_HISTORY_BY_CURRENT_SELLER } extend enum CancelCampaignReason { AUCTION_INSUFFICIENT_RESOURCES # Không đủ khả năng tổ chức đấu giá AUCTION_UNMET_EXPECTED_PRICE # Không đạt giá mong muốn AUCTION_FRAUD_DETECTED # Phát hiện gian lận trong quá trình đấu giá } type GenericCartItemAuctionCampaignInfo { applicationAuctionWinDeadline: Timestamp! minimumEstimatedDeliveryTime: Timestamp! maximumEstimatedDeliveryTime: Timestamp! } extend type CampaignInfo { applicationAuctionWinDeadline: Timestamp @deprecated(reason: "use applicationAuctionWinDeadline in auction field") auction: GenericCartItemAuctionCampaignInfo } type RoleOps { create(role: CreateRoleRequest!): Role @goField(forceResolver: true) update(id: ID!, role: UpdateRoleRequest!): Role @goField(forceResolver: true) addUsers(roleID: ID!, userIDs: [ID!]): Boolean! @goField(forceResolver: true) removeUsers(roleID: ID!, userIDs: [ID!]): Boolean! @goField(forceResolver: true) delete(roleID: ID!): Boolean! @goField(forceResolver: true) } type AuthOps { login(loginRequest: LoginRequest!): LoginResponse! @goField(forceResolver: true) socialLogin(request: SocialAuthInput!): LoginResponse! @goField(forceResolver: true) socialPreRegister(request: SocialAuthInput!): Boolean! @goField(forceResolver: true) socialRegister(request: SocialAuthInput!): LoginResponse! @goField(forceResolver: true) changePassword(oldPassword: String!, newPassword: String!): Boolean! @goField(forceResolver: true) @staffSecured requestForgetPassword(email: String!, prefixURL: String!): Boolean! @ goField(forceResolver: true) confirmForgetPassword(secretToken: String!, newPassword: String!): Boolean! @goField(forceResolver: true) } type SellerAuthOps { login(loginRequest: LoginRequest!): SellerLoginResponse! @goField(forceResolver: true) socialLogin(request: SocialAuthInput!): SellerLoginResponse! @goField(forceResolver: true) socialPreRegister(request: SocialAuthInput!): Boolean! @goField(forceResolver: true) socialRegister(request: SocialAuthInput!): SellerLoginResponse! @goField(forceResolver: true) changePassword(oldPassword: String, newPassword: String!): Boolean! @goField(forceResolver: true) @sellerSecured requestForgetPassword(email: String!, prefixURL: String, wrap: Boolean! = true): Boolean! @goField(forceResolver: true) confirmForgetPassword(secretToken: String!, newPassword: String!): Boolean! @goField(forceResolver: true) } type PermissionQuery { list(ids: [ID]): [Permission] @goField(forceResolver: true) } type RoleQuery { get(id: ID! @binding(constraint: "required,min=1")): Role @goField(forceResolver: true) pagination(filters: ListRolesFilters, pagination: PaginationRequest): ListRolesResponse @goField(forceResolver: true) } input LoginRequest { email: String! password: String! saleChannelID: ID } type LoginResponse { accessToken: String! error: AuthError user: User! @goField(forceResolver: true) } input SocialAuthInput { saleChannelID: ID! socialAccessToken: String! socialID: String # social username email: String! telephone: String name: String providerType: IdentityProvider! } type SellerLoginResponse { accessToken: String! error: AuthError user: SellerUser @goField(forceResolver: true) } # single role object type Role { id: ID! code: String! name: String! description: String createdAt: Timestamp! updatedAt: Timestamp! # selected permissions permissions:[Permission] @goField(forceResolver: true) # selected permissions with checked fullPermissions: [PermissionWithChecked] @goField(forceResolver: true) } enum RoleFilterOrderBy{ ID_ASC ID_DESC NAME_ASC NAME_DESC } input ListRolesFilters { query: String ids: [ID] orderBy: RoleFilterOrderBy } type ListRolesResponse{ roles:[Role]! paginationData: PaginationData! } input CreateRoleRequest { code: String! name: String! description: String permissions: [ID!] } input UpdateRoleRequest { name: String! code: String! description: String permissions: [ID!] } type RolePermission { roleId: ID! permissionId: ID! } input ListPermissionsFilters { ids: [ID] } type Permission { id: ID! code: String! name: String! parentId: ID # parent: Permission @goField(forceResolver: true) level: Int32! } type PermissionWithChecked { id: ID! code: String! name: String! parentId: ID level: Int32! isChecked: Boolean! } enum IdentityProvider { GOOGLE APPLE } enum AuthError { NO_ERROR SELLER_REJECTED POTENTIAL_CUSTOMER_STOP_CARING OTHER }type BankQuery { get(id: ID!): Bank @goField(forceResolver: true) pagination(request: BanksRequest,pagination: PaginationRequest): BanksResponse @goField(forceResolver: true) } type BankAccountOps { upsert(sellerID: ID!, request: [UpsertBankAccountRequest!]!): [UpsertBankAccountResponse!]! @goField(forceResolver: true) } type BankAccountQuery { all: [BankAccount] @goField(forceResolver: true) } input UpsertBankAccountRequest { id: ID deleteFlag: Boolean bankID: ID! bankAccountNumber: String! ownerBankAccountName: String! bankBranch: String! } type UpsertBankAccountResponse { id: ID! bankID: ID! bank: Bank! @goField(forceResolver: true) bankAccountNumber: String! ownerBankAccountName: String! bankBranch: String! } input BanksRequest{ ids: [ID!] query: String # get banks by full text search (name) } type Bank { id: ID! name: String! fullName: String! icon: String } type BanksResponse { banks: [Bank!] paginationData: PaginationData! } type BankAccount { id: ID! name: String! number: String! bankID: ID! bank: Bank! @goField(forceResolver: true) } input BankAccountInput { id: ID bankID: ID! bankAccountNumber: String! ownerBankAccountName: String! bankBranch: String! } type BankTransferAccount{ id: ID! bankID: ID! bank: Bank @goField(forceResolver: true) bankAccountNumber: String! name: String! bankBranch: String # qrImageData: String #base64 image data impl later qrUrl: String amount: Int64 paymentContent: String }type SellerBannerQuery { # only active banners list(filters: BannerFilter, pagination: PaginationRequest={offset: 0, limit: 10}): [Banner!] @goField(forceResolver: true) } type Banner { id: ID! imageURL: String! mobileURL: String! clickURL: String #optional } input BannerFilter { onGoingPromotion: Boolean content: String description: String }type BranchQuery { list: [Branch] @goField(forceResolver: true) } type Branch { id : ID! name : String createdAt : Timestamp updatedAt : Timestamp } #deprecated: use BrandQuery instead type ManufacturerQuery { get(id: ID!): Manufacturer @goField(forceResolver: true) @deprecated list: [Manufacturer] @goField(forceResolver: true) @deprecated } type Manufacturer { id: ID! name: String! logoURL: String catalogURL: [String!] description: String } type BrandQuery { get(id: ID!): Brand @goField(forceResolver: true) list: [Brand] @goField(forceResolver: true) popularBrand(limit: Int! = 40): [Brand!] @goField(forceResolver: true) pagination(filters: BrandFilters!, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[BrandSort!] = {by: CREATED_AT , sortType: DESC} ) : BrandResponse @goField(forceResolver: true) } type SellerBrandQuery { popularList(limit: Int! = 40): [Brand!] @goField(forceResolver: true) get(id: ID!): Brand @goField(forceResolver: true) } type Brand { id: ID! name: String! logoURL: String catalogURLs: [String!] description: String isActive: Boolean! quantity: Int64 @goField(forceResolver: true) } type BrandOps { create(request: CreateBrandInput): ID @goField(forceResolver: true) update(request: UpdateBrandInput): Boolean! @goField(forceResolver: true) } input CreateBrandInput { name: String! logo: String catalogs: [String!] description: String } input UpdateBrandInput { id: ID! name: String logo: String catalogs: [String!] description: String isActive: Boolean } input BrandFilters { query: String isActive: Boolean } input BrandSort { by: BrandSortBy = ID sortType: SortType! = DESC } enum BrandSortBy { ID CREATED_AT } type BrandResponse { brands: [Brand!] paginationData: PaginationData! } type CampaignQuery { get(campaignID: ID!): Campaign @goField(forceResolver: true) pagination(request: PaginationCampaignRequest!, campaignType: CampaignType!): PaginationCampaignResponse! @goField(forceResolver: true) getItemDetail(request: GetCampaignItemDetailRequest!): GetCampaignItemDetailResponse @goField(forceResolver: true) count(filters : PaginationCampaignFilters, campaignType: CampaignType!): Int64! @goField(forceResolver: true) } type CampaignOps { create(request: CreateCampaignRequest!, campaignType: CampaignType!): CreateCampaignResponse @goField(forceResolver: true) cancel(campaignID: ID!, reason: CancelCampaignReasonInput!): Boolean @goField(forceResolver: true) changeDisplayStatus(campaignID: ID!, isDisplay: Boolean!): Boolean @goField(forceResolver: true) } type SellerCampaignQuery { get(id: ID!): Campaign @goField(forceResolver: true) getItemDetail(request: GetCampaignItemDetailRequest!): GetCampaignItemDetailResponse @goField(forceResolver: true) paginationItems(request: PaginationCampaignItemsRequest!, campaignType: CampaignType!): PaginationCampaignItemsResponse! @goField(forceResolver: true) countItems(request : PaginationCampaignItemsRequest, campaignType: CampaignType!): Int64! @goField(forceResolver: true) } type SellerCampaignOps { interestItem(request: InterestItemRequest!): InterestItemResponse! @goField(forceResolver: true) } interface Campaign { id: ID! name: String! type: CampaignType! startDate: Timestamp! endDate: Timestamp! bannerID: ID banner: Banner @goField(forceResolver: true) shortDescription: String! description: String! saleChannelIDs: [ID!] saleChannels: [SaleChannel!] @goField(forceResolver: true) createdByID: ID! createdBy: User @goField(forceResolver: true) isActive: Boolean! isDisplay: Boolean! cancelReason: CancelCampaignReason cancelNote: String canceledByID: Int64 canceledBy: User @goField(forceResolver: true) canceledAt: Timestamp createdAt: Timestamp! updatedAt: Timestamp! timingStatus: CampaignTimingStatus! @goField(forceResolver: true) } enum CampaignTimingStatus{ ON_GOING UP_COMING ENDED } interface GetCampaignItemDetailResponse { id: ID! campaignID: ID! campaign: Campaign @goField(forceResolver: true) productID: ID product: Product @goField(forceResolver: true) } input PaginationCampaignItemsRequest { filters: PaginationCampaignItemsFilters = {} pagination: PaginationRequest! = {limit: 10, offset: 0} sort: PaginationCampaignItemsSort! = {by: ID, sortType: DESC} # clientTime: Timestamp! } input PaginationCampaignItemsFilters { query: String campaignIDs: [ID!] } input CreateCampaignRequest { # General information about the campaign name: String! startDate: Timestamp! endDate: Timestamp! saleChannelIDs: [ID!]! banner: BannerInput shortDescription: String! description: String! } input CancelCampaignReasonInput { reasonType: CancelCampaignReason! note: String } input InterestItemRequest { campaignItemID: ID! interested: Boolean! } input PaginationCampaignFilters { query: String saleChannelIDs: [ID!] createdByIDs: [ID!] timeRange : TimeRangeFilter isDisplay: Boolean canceledByUserIDs: [ID!] cancelReasons: [CancelCampaignReason!] } input PaginationCampaignRequest { filters: PaginationCampaignFilters = {} sort: PaginationCampaignSort! = {by: ID, sortType: DESC} pagination: PaginationRequest! = {limit: 10, offset: 0} # clientTime: Timestamp! } input PaginationCampaignSort { by: PaginationCampaignSortBy! sortType: SortType! } input PaginationCampaignItemsSort { by: PaginationCampaignItemsSortBy! sortType: SortType! } input GetCampaignItemDetailRequest { campaignItemID: ID! } type CreateCampaignResponse { errorMessage: String campaignID: ID } type PaginationCampaignResponse { campaigns: [Campaign!] paginationData: PaginationData! } interface PaginationCampaignItemsResponse { campaignType: CampaignType! paginationData: PaginationData! } type InterestItemResponse { isSuccess: Boolean! } enum CampaignType { PROMOTION AUCTION GROUP_BUYING } enum PaginationCampaignSortBy { ID } enum PaginationCampaignItemsSortBy { ID } enum CancelCampaignReason { ORTHER # Khác } type CartOps { create(cart: CreateCartInput): Cart @goField(forceResolver: true) clone(cloneCartID: ID!): Cart @goField(forceResolver: true) exportFile(cartID: ID!, fileType: ExportFileType!): FileType! @goField(forceResolver: true) updateCartItem(cartID: ID!, request: CartItemUpdateRequestInput, orderID: ID): Boolean! @goField(forceResolver: true) updateCartItemV2(cartID: ID!, request: CartItemUpdateRequestInput, orderID: ID): UpdateCartItemsResponse! @goField(forceResolver: true) delete(id: ID!): Boolean! @goField(forceResolver: true) updateCart(cartID: ID!, request: UpdateCartInput, orderID: ID): Boolean! @goField(forceResolver: true) updateCartV2(cartID: ID!, request: UpdateCartInput, orderID: ID): UpdateCartResponse! @goField(forceResolver: true) updateCartSeller(cartID: ID!, newSellerID: ID!): Boolean! @goField(forceResolver: true) # create and update combo, combo item addComboToCart(cartID: ID, replaceComboCartItemID: ID, replaceCartItemID: ID, request: ComboInput!, ignoreWarning: Boolean! = false): AddCartComboResponse! @goField(forceResolver: true) deleteComboFromCart(comboCartItemID: ID!): Boolean! @goField(forceResolver: true) } type SellerCartOps { # if the cart does not have product_id yet, the system will auto add the product to cart # if no cart exist then create new one createFromOrder(orderID: ID!, force: Boolean = false, saleChannelType: SaleChannelType): SellerCart @goField(forceResolver: true) setCartItemQuantity(cartID: ID, productID: ID!, quantity: Int64! = 0, saleChannelType: SaleChannelType, vat: Boolean): Boolean! @goField(forceResolver: true) setCartItemsQuantity(cartID: ID!, request: [SetItemQuantityInput]!, saleChannelType: SaleChannelType): Boolean! @goField(forceResolver: true) deleteProductFromCart(cartID: ID!, productID:ID!): Boolean! @goField(forceResolver: true) updateCart(cartID: ID!, request: UpdateSellerCartInput): Boolean! @goField(forceResolver: true) updateCustomerItemPrice(items: [CustomerPriceInput], saleChannelType: SaleChannelType): Boolean! @goField(forceResolver: true) updateItemPrice(items: [CustomerPriceInput], saleChannelType: SaleChannelType): Boolean! @goField(forceResolver: true) addComboToCart(cartID: ID, replaceComboCartItemID: ID, replaceCartItemID: ID, request: ComboInput!, ignoreWarning: Boolean! = false, saleChannelType: SaleChannelType): AddCartComboResponse! @goField(forceResolver: true) deleteComboFromCart(comboCartItemID: ID!): Boolean! @goField(forceResolver: true) deleteAuctionWinFromCart(comboCartItemID: ID!): Boolean! @goField(forceResolver: true) addVoucher(voucherID: ID): Boolean! @goField(forceResolver: true) setDeliveryDeadline(cartID: ID!, input: SetDeliveryDeadlineInput!): Boolean! @goField(forceResolver: true) addAuctionItemToCart(cartID: ID, request: AddAuctionItemToCartRequest!): AddAuctionItemToCartResponse! @goField(forceResolver: true) addVoucherToCart(voucherID: ID!): AddVoucherToCartResponse! @goField(forceResolver: true) removeVoucherFromCart(cartID: ID!): Boolean! @goField(forceResolver: true) } input AddAuctionItemToCartRequest { auctionItemID: ID! } input SetDeliveryDeadlineInput { deadline: Timestamp! } input CustomerPriceInput { productID: ID! price: Int64! @binding(constraint: "required,min=0") } type CartQuery { all: [Cart] @goField(forceResolver: true) get(id: ID!): Cart @goField(forceResolver: true) getSummaryFile(id: ID!): CartSummary @goField(forceResolver: true) } type SellerCartQuery { # return current cart of seller get(createIfNotExist: Boolean = false, saleChannelType: SaleChannelType, needCheckPromotion: Boolean = false): SellerCart @goField(forceResolver: true) getTotalProduct: Int64! @goField(forceResolver: true) getSellerVouchers(filter: SellerVoucherFilter): SellerVoucherResponse @goField(forceResolver: true) } input CartItemCreateInput { productId: ID! quantity: Int64! vat: Boolean! maxDaysOfDebt: Int64 customerPrice: Int64 } input CartItemUpdateInput { id: ID! quantity: Int64! vat: Boolean maxDaysOfDebt: Int64 # update price for customer customerPrice: Int64 # price for custom customSellerPrice: Int64 # product warranty productWarranty: Int64 } input CartItemUpdateRequestInput { # for update existing cart item cartItems:[CartItemUpdateInput!] # for create new cart item newItems: [CartItemCreateInput!] # for remove existing cart item removedItemIDs:[ID!] } input CreateCartInput{ sellerID: ID! warehouseID: ID! saleChannelType: SaleChannelType items: [CartItemCreateInput!] orderType: OrderType! = SELLER } enum ShippingType { BUS DELIVER_3PARTY PICK_UP_COUNTER URBAN_COD URBAN_NOT_COD } enum OrderPriority { LOW MEDIUM HIGH } enum OrderType { SELLER CUSTOMER } type CartItem implements GenericCartItem{ id: ID! productID: ID! product: Product! @goField(forceResolver: true, omitField: true) cartID: ID! cart: Cart! @goField(forceResolver: true) quantity: Int64! vat: Boolean! originalPrice: Int64! @goField(forceResolver: true) price: Int64! @goField(forceResolver: true) priceLevel: Int64! total: Int64! maxDaysOfDebt: Int64 profitSeller: Int64 inStock: Int64 @goField(forceResolver: true) customerPrice: Int64 customerTotal: Int64 productWarranty: Int64 customSellerPrice: Int64 preOrder: Boolean! @goField(forceResolver: true) promotionTag: PromotionTag createdAt: Timestamp updatedAt: Timestamp campaignInfo: CampaignInfo # expand for combo quantityInCombo: Int64 promotionProductGroupID: ID promotionProductGroup: ConditionPromotionProductGroup @goField(forceResolver: true) comboCartItemID: ID comboCartItem: ComboCartItem @goField(forceResolver: true) isGift: Boolean! productDiscount: Int64! @goField(forceResolver: true) stockByRegion: StockByRegion! @goField(forceResolver: true) @deprecated(reason: "use stockBySeller") appliedWithProductDiscount: ProductDiscount messages: [Message!] @goField(forceResolver: true) } type BusConfig { busName: String telephone: String location: String busStation: String fee: Int64 } type Deliver3PartyConfig { name: String weight: Int64 length: Int64 width: Int64 height: Int64 fee: Int64 customFeeEnabled: Boolean customFee: Int64 serviceCode: String serviceName: String provider: ShippingProvider @goField(forceResolver: true) providerID: ID carrierMethod: CarrierMethod carrierMaxFee: Int64 carrierMinFee: Int64 } type UrbanCODConfig { fee: Int64 } type UrbanConfig { fee: Int64 } input BusConfigInput { busName: String telephone: String location: String busStation: String fee: Int64 } input Deliver3PartyConfigInput { weight: Int64 length: Int64 width: Int64 height: Int64 fee: Int64 customFeeEnabled: Boolean customFee: Int64 name: String serviceCode: String serviceName: String providerID: ID carrierMethod: CarrierMethod carrierMaxFee: Int64 carrierMinFee: Int64 } input UrbanCODConfigInput { fee: Int64 } input ShippingConfigInput { busConfig: BusConfigInput deliver3PartyConfig: Deliver3PartyConfigInput urbanCODConfig: UrbanCODConfigInput } type ShippingConfiguration { busConfig: BusConfig deliver3PartyConfig: Deliver3PartyConfig urbanConfig: UrbanConfig } union ShippingConfig = Deliver3PartyConfig | BusConfig | UrbanCODConfig type Cart { id: ID! email: String items: [GenericCartItem] @goField(forceResolver: true) sellerID: ID! seller: Seller! @goField(forceResolver: true) name: String! createdByID: ID! createdBy: User! @goField(forceResolver: true) shippingContactID: ID shippingContact: Contact @goField(forceResolver: true) note: String internalNote: String shippingType: ShippingType! shippingConfig: ShippingConfig shippingConfiguration: ShippingConfiguration orderPriority: OrderPriority! promisedDeliverTime: Timestamp @deprecated(reason: "Use field 'deliveryDeadline' instead of this field") deliveryDeadline: Timestamp fullStockRequired: Boolean! assemblyRequired: Boolean #to do remove shippingFee: Int64! serviceFee: Int64 #to do remove customerShippingFee: Int64! temporaryServiceFee: Int64 #to do remove discountAmount: Int64! @goField(forceResolver: true) totalServiceProduct : Int64! @goField(forceResolver: true) customerTotalServiceProduct : Int64! @goField(forceResolver: true) quantityServiceProduct : Int64! @goField(forceResolver: true) # Sender info senderName: String! senderPhone: String! senderAddress: String! sendingWard: Ward @goField(forceResolver: true) exportedWarehouseID: ID exportedWarehouse: Warehouse @goField(forceResolver: true) vat: Boolean! @goField(forceResolver: true) subTotal: Int64! @goField(forceResolver: true) total: Int64! @goField(forceResolver: true) customerSubTotal: Int64 @goField(forceResolver: true) customerTotal: Int64 @goField(forceResolver: true) totalProduct: Int64! @goField(forceResolver: true) cashPayment: Int64! @goField(forceResolver: true) debtPayment: Int64! @goField(forceResolver: true) paymentMethod: PaymentMethod! customerPaymentMethod: CustomerPaymentMethod orderType: OrderType cloneCartID: ID cloneCart: CartItem @goField(forceResolver: true) allSenders: [Contact] @goField(forceResolver: true) saleChannelID: ID! saleChannel: SaleChannel @goField(forceResolver: true) voucherID: ID voucher: SellerVoucher @goField(forceResolver: true) createdAt: Timestamp! updatedAt: Timestamp! } # everything about cart's VAT extend type Cart { vatAllOrder: Boolean! @goField(forceResolver: true, omitField: true) vatTaxIDNumber: String vatCompanyName: String vatEmail: String vatAddress: String customerVatIDNumber: String vatCustomerName: String customerVatEmail: String customerVatAddress: String } extend type Cart { sellerProfitAmount: Int64 @goField(forceResolver: true) serviceFeePayer: ServiceFeePayer shippingFeePayer: ShippingFeePayer } enum ServiceFeePayer { SELLER CUSTOMER } enum ShippingFeePayer { SELLER CUSTOMER } interface GenericCartItem { id: ID! # main product of combo / product of cart item, to do rename productID: ID! product: Product! @goField(forceResolver: true, omitField: true) cartID: ID! cart: Cart! @goField(forceResolver: true) # quantity of combo / quantity of cart item, to do rename quantity: Int64! vat: Boolean! originalPrice: Int64! @goField(forceResolver: true) price: Int64! @goField(forceResolver: true) priceLevel: Int64! total: Int64! maxDaysOfDebt: Int64 profitSeller: Int64 inStock: Int64 @goField(forceResolver: true) customerPrice: Int64 customerTotal: Int64 productWarranty: Int64 customSellerPrice : Int64 promotionTag: PromotionTag createdAt : Timestamp updatedAt : Timestamp appliedWithProductDiscount: ProductDiscount campaignInfo: CampaignInfo } type PromotionTag { topTag: PromotionTitleType bottomTag: ConcisePromotionInfo! } type ConcisePromotionInfo { # Mô tả ngắn gọn thông tin khuyến mãi status: ItemPromotionStatus shortName: String! } enum ItemPromotionStatus { SUGGESTED # Gợi ý Mua ngay với khuyến mãi APPLIED # Đã áp dụng OUT_OF_STOCK # Hết lượt mua (đối với combo) ENDED # Đã kết thúc (đối với combo) } enum PromotionTitleType { QUANTITY_BASED_PROMOTION # Khuyến mãi theo số lượng GIFT_PROMOTION # Mua để nhận quà FIXED_PRICE_PROMOTION # Mua nhiều giảm giá DISCOUNT_MONEY_PROMOTION # Mua sỉ giá hời WIN_AUCTION # Đấu giá win } enum PaymentMethod { CASH # tiền mặt, chuyển khoản DEBT # công nợ COD } enum CustomerPaymentMethod { COD # giao hàng thu tiền CASH # tự thanh toán cho đại lý } input UpdateCartInput { email: String name: String note: String internalNote: String shippingType: ShippingType! orderPriority: OrderPriority! promisedDeliverTime: Timestamp @deprecated(reason: "Use field 'deliveryDeadline' instead of this field") deliveryDeadline: Timestamp fullStockRequired: Boolean! assemblyRequired: Boolean #to do remove vatAllOrder: Boolean! shippingConfig: ShippingConfigInput vatTaxIDNumber: String vatCompanyName: String vatEmail: String vatAddress: String customerVatIDNumber: String vatCustomerName: String customerVatEmail: String customerVatAddress: String shippingFee: Int64! = 0 # todo remove serviceFee: Int64 = 0 # todo remove temporaryServiceFee: Int64 = 0 # todo remove discountAmount: Int64 != 0 senderName: String! senderPhone: String! senderAddress: String! exportedWarehouseID: ID! shippingContactID: ID! orderType: OrderType customerPaymentMethod: CustomerPaymentMethod paymentMethod: PaymentMethod serviceFeePayer: ServiceFeePayer shippingFeePayer: ShippingFeePayer } input ShippingInformation { shippingType: ShippingType! shippingConfig: ShippingConfigInput shippingFee: Int64! = 0 } input VatInformation{ # thông tin xuất vat vatTaxIDNumber: String vatCompanyName: String vatEmail: String vatAddress: String } input CustomerVatInformation { # thông tin xuất vat của customer customerVatIDNumber: String vatCustomerName: String customerVatEmail: String customerVatAddress: String } input UpdateSellerCartInput { shippingContactID: ID # địa chỉ giao hàng email: String shippingInformation: ShippingInformation vatInformation : VatInformation customerVatInfomation: CustomerVatInformation # pttt của khách hàng customerPaymentMethod: CustomerPaymentMethod # pttt của đại lý paymentMethod: PaymentMethod # ghi chú note: String bankAccountID: ID serviceFeePayer: ServiceFeePayer shippingFeePayer: ShippingFeePayer } type CartSummary{ fileUrl: String! } type CartMetric { id: ID! amount: Int64! } # copy from Cart, but commented some values type SellerCart { id: ID! items(productType: ProductType! = MATERIAL @deprecated(reason: "No longer support"), productTypes: [ProductType!] = MATERIAL): [GenericCartItem] @goField(forceResolver: true) fullServices: [ServiceItem]! @goField(forceResolver: true) fullVouchers: [ServiceItem]! @goField(forceResolver: true) sellerID: ID! seller: Seller! @goField(forceResolver: true) name: String! email: String createdByID: ID! createdBy: User! @goField(forceResolver: true) shippingContactID: ID shippingContact: Contact @goField(forceResolver: true) note: String shippingType: ShippingType! shippingConfig: ShippingConfig shippingConfiguration: ShippingConfiguration shippingFee: Int64! customerShippingFee: Int64! serviceFee: Int64 #to do remove totalServiceProduct: Int64! @goField(forceResolver: true) customerTotalServiceProduct: Int64! @goField(forceResolver: true) quantityServiceProduct : Int64! @goField(forceResolver: true) quantityVoucher : Int64! @goField(forceResolver: true) discountAmount: Int64! @goField(forceResolver: true) vat: VatInfo! @goField(forceResolver: true) subTotal: Int64! @goField(forceResolver: true) total: Int64! @goField(forceResolver: true) customerSubTotal: Int64 @goField(forceResolver: true) customerTotal: Int64 @goField(forceResolver: true) totalProduct: Int64! @goField(forceResolver: true) paymentMethod: PaymentMethod! vatTaxIDNumber: String vatCompanyName: String vatEmail: String vatAddress: String customerVatIDNumber: String vatCustomerName: String customerVatEmail: String customerVatAddress: String customerPaymentMethod: CustomerPaymentMethod orderType: OrderType paymentBankAccountID: ID paymentBankAccount: BankAccount @goField(forceResolver: true) exportedWarehouseID: ID deliveryDeadline: Timestamp createdAt: Timestamp! updatedAt: Timestamp! hasCityWarning: Boolean! @goField(forceResolver: true) # Warning when the city in the shipping address differs from the selected city in user voucherID: ID sellerVoucher: SellerVoucher @goField(forceResolver: true) } extend type SellerCart { sellerProfitAmount: Int64 @goField(forceResolver: true) sellerProfitAmountBeforeCost: Int64 @goField(forceResolver: true) serviceFeePayer: ServiceFeePayer shippingFeePayer: ShippingFeePayer } input SetItemQuantityInput { productID: ID! quantity: Int64! = 0 vat: Boolean promotionProductGroupID: ID } type ServiceItem { cartItemID: ID productID: ID! product: Product @goField(forceResolver: true) quantity: Int64! price: Int64! customerPrice: Int64 } input CartPromotionItemInput { mainProductID: ID! promoTierID: ID! tierQuantity: Int! setItemQuantityInputs: [SetItemQuantityInput!]! discountType: DiscountType! discountAmount: Int64! } # Promotion type ComboCartItem implements GenericCartItem { id: ID! # to do rename later, main product productID: ID! product: Product! @goField(forceResolver: true, omitField: true) cartID: ID! cart: Cart! @goField(forceResolver: true) # quantity of combo quantity: Int64! vat: Boolean! originalPrice: Int64! @goField(forceResolver: true) price: Int64! @goField(forceResolver: true) priceLevel: Int64! total: Int64! maxDaysOfDebt: Int64 profitSeller: Int64 inStock: Int64 @goField(forceResolver: true) customerPrice: Int64 customerTotal: Int64 productWarranty: Int64 customSellerPrice : Int64 promotionTag: PromotionTag createdAt : Timestamp updatedAt : Timestamp campaignInfo: CampaignInfo # expand for combo comboCartItemID: ID! cartItems: [CartItem!] @goField(forceResolver: true) giftItems: [CartItem!] @goField(forceResolver: true) promoTierID: ID! promoTier: PromotionCampaignTier @goField(forceResolver: true) promotionCampaignStatus: PromotionCampaignStatus! availableQuantity: Int64! comboCartItemStatus: ComboCartItemStatus! # for DiscountMoney & FixedPrice combo discountType: DiscountType discountAmount: Int64 # for Gift combo shortNameOfCombo: String # total price discount of comboCartItem discountMoney: Int64! @goField(forceResolver: true) # Chính sách giá appliedWithProductDiscount: ProductDiscount #giảm giá trên 1 combo + Chính sách giá nếu có discountPerCombo: Int64! } type CampaignInfo { campaignType: CampaignType! } enum CartAction { RELOADING CONTINUE BACK APPROVE CANCEL CHANGE CHANGE_COMBO CONTINUE_BUY_PRODUCT # CTKM một sản phẩm đã kết thúc nhưng vẫn tiếp tục thêm sản phẩm vào giỏ hàng } type AddCartComboResponse { errorMessage: String action: [CartAction!] result: Boolean! } type AddAuctionItemToCartResponse { message: String result: Boolean! } # Todo remove enum ComboCartItemStatus { APPLIED # Đã áp dụng OUT_OF_STOCK # Hết lượt mua ENDED # Đã kết thúc } type UpdateCartResponse { result: Boolean! isNeedFetchProvider: Boolean isNeedUpdateShippingFee: Boolean } type UpdateCartItemsResponse { result: Boolean! isNeedFetchProvider: Boolean isNeedUpdateShippingFee: Boolean } enum MessageType { WARNING ERROR } type Message { type: MessageType! content: String! code: MessageCode! } union MessageCode = ProductStockMessage | AddVoucherToCartMessage | WarnigVoucherStatusMessage | GetSellerVouchersMessage | MinOrderQuantityMessage type ProductStockMessage { code: ProductStockWarningCode! } type AddVoucherToCartMessage { code: AddVoucherToCartMessageCode! } enum AddVoucherToCartMessageCode { """ Vô hiệu""" VOUCHER_IS_DISABLED """ Hết hiệu lực""" VOUCHER_IS_EXPIRED """ Hết lượt sử dụng""" VOUCHER_IS_OUT_OF_USAGE """ Không đạt giá trị tối thiểu""" VOUCHER_IS_NOT_MEET_MINIMUM_VALUE } type AddVoucherToCartResponse { isSuccess: Boolean! message: Message } input SellerVoucherFilter { code: String # code of voucher, seller in have voucher code segment voucherIDs: [ID!] created: Boolean } type SellerVoucherResponse { sellerVouchers: [SellerVoucher!] message: Message } type WarnigVoucherStatusMessage { code: WarnigVoucherStatusCode! } enum WarnigVoucherStatusCode { VOUCHER_STATUS_NOT_MEET_MINIMUM_VALUE VOUCHER_STATUS_EXPIRED VOUCHER_STATUS_OUT_OF_USAGE } type GetSellerVouchersMessage { code: GetSellerVouchersCode! } enum GetSellerVouchersCode { """Vui lòng nhập chính xác mã voucher!""" PLEASE_ENTER_THE_VOUCHER_CODE_CORRECTLY """Rất tiếc! Không thể tìm thấy mã voucher này. Vui lòng thử lại!""" SORRY_UNABLE_TO_FIND_THIS_VOUCHER_CODE_PLEASE_TRY_AGAIN """Rất tiếc! Không thể áp dụng vì mã voucher này có hiệu lực từ dd.mm.yyyy hh:mm.""" SORRY_UNABLE_TO_APPLY_THIS_VOUCHER_CODE_BECAUSE_IT_IS_VALID_FROM """Rất tiếc! Voucher này đã hết hiệu lực.""" SORRY_THIS_VOUCHER_HAS_EXPIRED """Rất tiếc! Voucher này đã hết lượt sử dụng.""" SORRY_THIS_VOUCHER_HAS_BEEN_USED_UP """Đã hủy áp dụng các vouchers không khả dụng hoặc hết hiệu lực!""" REMOVE_VOUCHER_APPLIED """Rất tiếc! Voucher này không còn khả dụng.""" SORRY_THIS_VOUCHER_IS_DISABLED } type MinOrderQuantityMessage { code: MinOrderQuantityWarningCode! }type CategoryQuery { pagination(filters: CategoriesFilters, pagination: PaginationRequest): CategoriesResponse @goField(forceResolver: true) get(id: ID!): Category @goField(forceResolver: true) list(req: CategoriesFilters): [Category] @goField(forceResolver: true) } type SellerCategoryQuery { popularList: [SellerCategory] @goField(forceResolver: true) list(req: CategoriesFilters): [SellerCategory] @goField(forceResolver: true) get(id: ID!): SellerCategory @goField(forceResolver: true) } type CategoryOps { create(req: CategoryInput!): ID @goField(forceResolver: true) update(id: ID!, req: CategoryInput!): Boolean! @goField(forceResolver: true) updateStatus(ids: [ID!], isActive: Boolean!): Boolean! @goField(forceResolver: true) } input CategoryInput { name: String! description: String logoURL: String parentID: ID attributeIDs: [ID] } type Category { id: ID! code: String! name: String! logoURL: String description: String! level: Int32! isActive: Boolean! parentID: ID parent: Category @goField(forceResolver: true) children: [Category] @goField(forceResolver: true) attributes: [Attribute] @goField(forceResolver: true) totalProduct: Int64 @goField(forceResolver: true) totalActiveProduct: Int64 @goField(forceResolver: true) } type SellerCategory { id: ID! code: String! name: String! logoURL: String description: String! parentID: ID parent: SellerCategory @goField(forceResolver: true) children: [SellerCategory] @goField(forceResolver: true) totalProduct: Int64 @goField(forceResolver: true) } input CategoriesFilters { query: String # text search IDs: [ID!] levels:[Int64!] attributeIDs: [ID!] isActive : Boolean } type CategoriesResponse { categories: [Category!] paginationData: PaginationData! } type ChatUserOps{ changeGroupChatName(request: ChangeGroupChatNameInput!): Boolean! @goField(forceResolver: true) } input ChangeGroupChatNameInput { newGroupChatName: String! sellerIDs: [ID!] } type ImageOps { upload(file: Upload!): ImageType! @goField(forceResolver: true) } type FileOps { upload(files: [Upload!]): [FileType]! @goField(forceResolver: true) } input TimeRangeFilter{ from: Timestamp to: Timestamp } # pagination types input PaginationRequest { offset: Int64 = 0 limit: Int64 = 10 skipTotalCount: Boolean = false } input AttributesFilter { valueIDs: [ID!] } input AttributeValuesFilter { attributeID: ID! valueIDs: [ID!] } type PaginationData { total: Int64 offset: Int64 limit: Int64 cursorHasNext: Boolean } type ImageType { path: String! origin: String! @goField(forceResolver: true) thumbnail: String! @goField(forceResolver: true) } type FileType { path: String! url: String! @goField(forceResolver: true) } enum DatePeriodUnit { YEAR MONTH DAY } enum CopyrightUnit { YEAR MONTH DAY FOREVER } enum Period { # from the beginning of the month START_OF_MONTH # from the beginning of the quarter START_OF_QUARTER # from the beginning of the year START_OF_YEAR # first 6 months FIRST_6_MONTHS # last 6 months LAST_6_MONTHS } enum ExportFileType { PDF JPEG XLSX } # system common info type BuildVersion { serviceName: String! buildVersion: String! buildHash: String! } type VersionQuery { getServiceVersions: [BuildVersion!] @goField(forceResolver: true) } type LinkQuery { generateDynamicLinkFromUrl(url: String!): String @goField(forceResolver: true) } type ConfigurationQuery { get: Configuration @goField(forceResolver: true) } type Configuration { hotline: String! warehouses: String! paymentPolicyURL: String! termAndConditionURL: String! contactURL: String! } type ContactOps { create(contact: ContactInput): Contact @goField(forceResolver: true) update(id: ID!, contact: ContactInput): Contact @goField(forceResolver: true) delete(id: ID!): Boolean! @goField(forceResolver: true) } type SellerContactOps { create(contact: SellerContactInput!, addToCartID: ID): Contact @goField(forceResolver: true) update(id: ID!, contact: SellerContactInput): Contact @goField(forceResolver: true) delete(id: ID!): Boolean! @goField(forceResolver: true) createCustomerContact(contact: SellerContactInput!, customerID: ID!, addToCartID: ID): Contact @goField(forceResolver: true) } type ContactQuery { list(ids: [ID!], sellerID: ID, query: String ,contactType : ContactType): [Contact] @goField(forceResolver: true) pagination(filters: ContactFilters, pagination: PaginationRequest! = {limit: 10, offset: 0}): ContactResponse @goField(forceResolver: true) # return current seller contact list get(id: ID!): Contact @goField(forceResolver: true) } type SellerContactQuery { list(ids: [ID!], query: String , contactType : ContactType): [Contact] @goField(forceResolver: true) # return current seller contact list get(id: ID!): Contact @goField(forceResolver: true) } input ContactFilters { query: String sellerID : ID } type ContactResponse { contacts: [Contact!] paginationData: PaginationData! } input ContactInput{ fullName: String! email: String telephone: String! address: String wardID: ID! districtID: ID! cityID: ID! sellerID: ID contactID : ID customerID : ID isDefault: Boolean! type : ContactType # to do remove } input SellerContactInput{ fullName: String! email: String telephone: String! address: String wardID: ID! districtID: ID! cityID: ID! customerID : ID isDefault: Boolean! type : ContactType } enum ContactType { SELLER CUSTOMER } type Contact { id: ID! fullName: String! email: String telephone: String! address: String wardID: ID districtID: ID cityID: ID ward: Ward @goField(forceResolver: true) district: District @goField(forceResolver: true) city: City @goField(forceResolver: true) sellerID: ID seller: Seller @goField(forceResolver: true) customerID: ID customer: Customer @goField(forceResolver: true) isDefault: Boolean! type : ContactType! } type CustomerOps{ create(customerInfo: CustomerInput!, contact: ContactInput!, addToCartID: ID): Customer! @goField(forceResolver: true) update(id: ID!, customerInfo: CustomerInput!): Customer! @goField(forceResolver: true) } type CustomerQuery{ get(id: ID!): Customer @goField(forceResolver: true) pagination(filters: CustomerFilters, pagination: PaginationRequest = {limit: 10, offset: 0}): CustomerPaginationResponse @goField(forceResolver: true) } type CustomerPaginationResponse { customers: [Customer] paginationData: PaginationData! } input CustomerFilters { query: String } input CustomerInput { fullName: String! telephone: String! } type Customer { id: ID! fullName: String! telephone: String! contacts: [Contact] @goField(forceResolver: true) createdAt: Timestamp! } type DepartmentOps { delete(ids: [ID!] @binding(constraint: "min=1")): Boolean! @goField(forceResolver: true) create(department: DepartmentInput!): Department! @goField(forceResolver: true) update(id: ID!, department: DepartmentInput!): Department! @goField(forceResolver: true) } type DepartmentQuery { get(id: ID! @binding(constraint: "min=1")): Department @goField(forceResolver: true) pagination(filters: DepartmentsFilters, pagination: PaginationRequest = {limit: 10, offset: 0}): DepartmentsResponse @goField(forceResolver: true) } type Department { id: ID! code: String! name: String! description: String updatedAt: Timestamp! } input DepartmentInput { code: String! name: String! description: String } type DepartmentsResponse { departments: [Department] paginationData: PaginationData! } input DepartmentsFilters { query: String # full text search } enum DisplayType { GRID SLIDE } enum PriceBidSessionEventType { INIT APPROVE @deprecated(reason: "Split to seller and staff approve") NEW_BID @deprecated(reason: "Split to seller and staff assess") REJECT """ Đề nghị bị hủy do quá hạn """ EXPIRE """ Đại lý trả giá """ SELLER_ASSESS """ Đại lý chấp nhận giá đề nghị """ SELLER_APPROVE """ Đề nghị bị hủy do sản phẩm bị xóa khỏi giỏ hàng """ SELLER_REJECT """ Hồng Anh chào bán giá mới """ STAFF_ASSESS """ Hồng Anh chấp nhận đề nghị """ STAFF_APPROVE """ Hồng Anh từ chối đề nghị """ STAFF_REJECT """ Đề nghị hoàn thành do đại lý đã áp dụng giá đề nghị """ COMPLETE """ Đề nghị bị hủy do đại lý hủy phiên trả giá """ CANCEL } type ImportRequestQuery{ get(id: ID! @binding(constraint: "min=1")) : ImportRequest @goField(forceResolver: true) pagination( filters: ImportRequestsFilters, pagination: PaginationRequest = {limit: 10, offset: 0} sorts: [ImportRequestSort!] ): ImportRequestsResponse @goField(forceResolver: true) count(filters : ImportRequestsFilters): Int64! @goField(forceResolver: true) } type ImportRequestOps{ create(request: CreateImportRequestInput) : ImportRequest @goField(forceResolver: true) update(id: ID!, request: UpdateImportRequestInput!) : Boolean @goField(forceResolver: true) confirmReject(id: ID!, request: ConfirmRejectImportRequestInput!) : Boolean @goField(forceResolver: true) #change status to WAITING_BUYING, CANCELED, COMPLETED updateStatus(id: ID!, actionType :ImportRequestChangeStatusActionType!) : Boolean @goField(forceResolver: true) managerApprove(id: ID!) : Boolean @goField(forceResolver: true) managerApproveAfterChecking(id: ID!) : Boolean @goField(forceResolver: true) technicalApprove(id: ID!) : Boolean @goField(forceResolver: true) managerReject(id: ID!, request: ConfirmRejectImportRequestInput) : Boolean @goField(forceResolver: true) technicalReject(id: ID!, request: ConfirmRejectImportRequestInput!) : Boolean @goField(forceResolver: true) confirmComplete(id: ID!) : Boolean @goField(forceResolver: true) confirmCancel(id: ID!) : Boolean @goField(forceResolver: true) } enum Currency { VND USD } enum ImportRequestPaymentTerms { ADVANCE_PAYMENT CASH_ON_DELIVERY DEFERRED_PAYMENT } enum ImportRequestType { DOMESTIC OVERSEAS REFUND RE_IMPORT_WARRANTY } enum ImportRequestStatus { WAITING_APPROVAL WAITING_FOR_BUYING REJECTED CANCELED COMPLETED } extend enum ImportRequestStatus { #for sales return WAITING_TECHNICAL_CONFIRM WAITING_FOR_STOCK } enum ImportRequestPaymentMethod{ BANK_TRANSFER DEBT CASH } enum ImportRequestChangeStatusActionType{ CONFIRM_COMPLETE CONFIRM_APPROVE CONFIRM_REJECT CANCEL MANAGER_APPROVE # first time TECHNICAL_APPROVE MANAGER_REJECT TECHNICAL_REJECT MANAGER_APPROVE_AFTER_TECHNICAL_CHECKING #after technical rejected } type ImportRequest { id : ID! code: String! supplierID : ID supplier : Seller @goField(forceResolver: true) warehouseID : ID warehouse : Warehouse @goField(forceResolver: true) items : [ImportRequestItems] @goField(forceResolver: true) type :ImportRequestType! status : ImportRequestStatus! paymentMethods : [ImportRequestPaymentMethod!] paymentTerms : [ImportRequestPaymentTerms!] paymentNotes: String rejectedReason: String fileURLs : [String!] note : String createdByID : ID! createdBy : User! @goField(forceResolver: true) updatedByID : ID updatedBy : User @goField(forceResolver: true) createdAt : Timestamp updatedAt : Timestamp } #expand for sales return extend type ImportRequest { waitingApprovalCount : Int64! processDeadline : Timestamp receiveMethod : ShippingType receivingAddress: String } type ImportRequestItems { id : ID! importRequestID : ID! importRequest : ImportRequest @goField(forceResolver: true) productID : ID product : Product @goField(forceResolver: true) productName : String quantity : Int64! price : Int64! currency : Currency! warranty : Int64 warrantyPeriod : DatePeriodUnit isVat : Boolean creditDays : Int64 paymentNote : String expectedDeliveryTime : Timestamp createdAt : Timestamp updatedAt : Timestamp } extend type ImportRequestItems { #expand for sales return orderID : ID order : Order @goField(forceResolver: true) importReason : String serials : [Serial!] @goField(forceResolver: true) } input ImportRequestsFilters{ query: String! = "" types : [ImportRequestType!] statuses : [ImportRequestStatus!] warehouseIDs : [ID!] supplierIDs : [ID!] createdByIDs : [ID!] updatedByIDs : [ID!] codes : [String!] timeRange: TimeRangeFilter } type ImportRequestsResponse { importRequests: [ImportRequest!] paginationData: PaginationData! } input CreateImportRequestInput{ supplierID : ID warehouseID : ID type :ImportRequestType! paymentMethods : [ImportRequestPaymentMethod] paymentTerms : [ImportRequestPaymentTerms] paymentNotes: String fileURLs : [String] note : String items : [CreateImportRequestItemInput!]! #extended to the Sales Return section expandSalesReturnInput: ExpandSalesReturnInput } input CreateImportRequestItemInput{ productID : ID productName : String! quantity : Int64! price : Int64 = 0 currency : Currency! warranty : Int64 warrantyPeriod : DatePeriodUnit isVat : Boolean! creditDays : Int64 paymentNote : String expectedDeliveryTime : Timestamp expandSalesReturnItemInput: ExpandSalesReturnItemInput } #expand for sales return input ExpandSalesReturnItemInput{ orderID : ID! importReason : String serialCodes: [String!] } input UpdateImportRequestInput{ supplierID : ID warehouseID : ID type :ImportRequestType! paymentMethods : [ImportRequestPaymentMethod] paymentTerms : [ImportRequestPaymentTerms] paymentNotes: String fileURLs : [String] note : String deletedIDs: [ID!] newItems : [UpdateImportRequestItemInput] updatedItems : [UpdateImportRequestItemInput] isResubmit: Boolean! expandSalesReturnInput: ExpandSalesReturnInput } #for sales return input ExpandSalesReturnInput{ sellerID : ID! receivingAddress : String processDeadline : Timestamp receiveMethod : ShippingType } input UpdateImportRequestItemInput{ id : ID productID : ID productName : String quantity : Int64 price : Int64 currency : Currency! warranty : Int64 warrantyPeriod : DatePeriodUnit isVat : Boolean! creditDays : Int64 paymentNote : String expectedDeliveryTime : Timestamp expandSalesReturnItemInput: ExpandSalesReturnItemInput } input ConfirmRejectImportRequestInput{ rejectedReason : String! fileUrls: [String!] } input ManagerConfirmRejectImportRequestInput { rejectedReason : String! fileUrls: [String!] } input ImportRequestSort{ by: ImportRequestSortBy! = CREATED_AT type: SortType! = DESC } enum ImportRequestSortBy { CREATED_AT UPDATED_AT } type SerialImportNotesQuery { pagination (branchesID: ID, filters: SerialImportNotesFilters, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[SerialImportNotesSort!] ) : SerialImportNotesResponse @goField(forceResolver: true) paginationSerial (filters: SerialImportNotesFilters, , pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[SerialImportNotesSort!] ) : SerialResponse @goField(forceResolver: true) get(id : ID!):SerialImportNotes @goField(forceResolver: true) } type SerialImportNotesOps { create(request: SerialImportNotesInput): SerialImportNotes @goField(forceResolver: true) update(serialImportNoteID : ID! , request: UpdateSerialImportNoteInput!) : Boolean @goField(forceResolver: true) exportFile(serialImportNoteID: ID!, serialImportNoteItemIDs: [ID!], type: SerialNoteType!, fileType: ExportFileType!, serialType: SerialType): FileType! @goField(forceResolver: true) uploadSerialImport(file: Upload!, serialType: SerialType): SerialImportFileSession! @goField(forceResolver: true) } type SerialImportFileSession { fileName: String! fileURL: String! errorFileURL: String status: SerialImportFileSessionStatus! errorCause: String! createdByID: ID! createdBy: User @goField(forceResolver: true) createdAt : Timestamp! } enum SerialImportFileSessionStatus { SUCCEED FAILED } input UpdateSerialImportNoteInput { providerID : ID warehouseID : ID note : String fileURLs: [String!] soldDateFromProvider : Timestamp removeItemIDs : [ID!] newItems : [UpdateSerialImportNoteItemInput!] updateItems :[UpdateSerialImportNoteItemInput!] } input UpdateSerialImportNoteItemInput { serialImportNoteItemID : ID productID : ID warrantyType : WarrantyType warrantyPeriodSupplier : Int64 warrantyUnit : DatePeriodUnit quantity : Int64 serialItems : [String!] } input SerialImportNotesFilters { branchIDs : [ID!] query : String createdByIDs : [ID!] serialImportNoteType : [SerialImportNotesType!] warehouseIDs: [ID!] serialID : ID serialImportNoteIDs: [ID!] sellerIDs: [ID!] timeRange: TimeRangeFilter productIDs: [ID!] } enum SerialImportNotesSortBy{ ID CREATED_AT } input SerialImportNotesSort { by: SerialImportNotesSortBy = ID sortType: SortType! = DESC } type SerialImportNotesResponse { SerialImportNotes: [SerialImportNotes!] paginationData: PaginationData! } type SerialResponse { importSerialItems: [ImportSerialItem!] paginationData: PaginationData! } enum SerialImportNotesType { """Nhập lần đầu""" FIRST_TIME_IMPORT #nhập lần đầu """Hủy đơn hoặc thu hồi""" RETURN # hủy đơn hoặc thu hồi """Nhập lại theo bảo hành""" RE_IMPORT_WARRANTY #nhập lại theo bảo hành """Luân chuyển serial giữa các kho""" TRANSFER_SERIAL """Khác""" OTHER } input SerialImportNoteItemInput { productID : ID warrantyType : WarrantyType warrantyOnSale : Int64 warrantyPeriodSupplier : Int64 warrantyUnit : DatePeriodUnit quantity : Int64 serialItems : [String!] warrantyItem : WarrantyItemInput } """Note that: serialID: the serial will be exported replaceSerialID: replaced serial, will be imported """ input WarrantyItemInput { warrantyNoteID : ID """ Only for type RE_IMPORT_WARRANTY """ warehouseID : ID """serialID: the serial will be exported""" serialID : ID # the serial will be exported """replaceSerialID: replaced serial, will be imported""" replaceSerialID : ID #replaced serial, will be imported } input SerialImportNotesInput { importType : SerialImportNotesType! providerID : ID # nhập lần đầu sellerID : ID #Hoàn trả do khách hủy đơn / HA thu hồi """ For all of type, explode RE_IMPORT_WARRANTY""" warehouseID : ID orderID : ID note : String fileURLs: [String!] soldDateFromProvider : Timestamp items : [SerialImportNoteItemInput!]! } type SerialImportNotes { id : ID code : String type : SerialImportNotesType providerID : ID provider : Seller @goField(forceResolver: true) sellerID : ID seller : Seller @goField(forceResolver: true) orderID : ID order : Order @goField(forceResolver: true) warehouseID : ID warehouse : Warehouse @goField(forceResolver: true) createdByID : ID createdBy : User @goField(forceResolver: true) branchID: ID branch : Branch @goField(forceResolver: true) quantityKindOfProduct : Int64 @goField(forceResolver: true) quantitySerial: Int64 @goField(forceResolver: true) items : [SerialImportNoteItem] @goField(forceResolver:true) note : String fileURLs : [String!] soldDateFromProvider : Timestamp createdAt : Timestamp updatedAt: Timestamp purchaseOrderCode: String } type SerialImportNoteItem { id : ID! serialImportNoteID : ID serialImportNote : SerialImportNotes @goField(forceResolver: true) productID : ID product : Product @goField(forceResolver: true) warrantyType: WarrantyType warrantyOnSale : Int64 warrantyPeriodProvider : Int64 warrantyUnit : DatePeriodUnit! serialItems : [ImportSerialItem] @goField(forceResolver: true) quantity : Int64 createdAt : Timestamp updatedAt: Timestamp copyrightTerm: Int64 copyrightUnit: CopyrightUnit } type ImportSerialItem { serialID : ID serial : Serial @goField(forceResolver: true) warrantyNoteID : ID warrantyNote : WarrantyNote @goField(forceResolver: true) warehouseID : ID warehouse : Warehouse @goField(forceResolver: true) serialImportNoteItemID : ID serialImportNoteItem : SerialImportNoteItem @goField(forceResolver: true) } enum SerialStatus { AVAILABLE UNAVAILABLE DISABLED } # location types type DistrictQuery { list(ids:[ID!]): [District] @goField(forceResolver: true) listOfCity(cityID:ID!): [District] @goField(forceResolver: true) } type CityQuery { list(ids:[ID!], hasWarehouse: Boolean = false): [City] @goField(forceResolver: true) } type WardQuery { list(ids:[ID!]): [Ward] @goField(forceResolver: true) listOfDistrict(districtID:ID!): [Ward] @goField(forceResolver: true) } type City { id: ID! code: String! name: String! shortName: String! districts: [District] @goField(forceResolver: true) } type District { id: ID! code: String! name: String! cityID: ID! city: City @goField(forceResolver: true) wards: [Ward]! @goField(forceResolver: true) } type Ward { id: ID! code: String! name: String! districtID: ID! district: District @goField(forceResolver: true) } type NotificationQuery { list(pagination: PaginationRequest!={offset: 0, limit: 10}): [Notification!] @goField(forceResolver: true) totalUnreadNotifications : Int64 @goField(forceResolver: true) pagination(filters: NotificationsFilter ,pagination: PaginationRequest!={offset: 0, limit: 10} , sort:[NotificationSort!]! = [{by: ID , notificationType: DESC}]): NotificationPaginationResponse @goField(forceResolver: true) } enum NotificationStatus { READ UNREAD } input NotificationSort { by: NotificationSortBy! notificationType: SortType! = DESC } input NotificationsFilter { query: String } enum NotificationSortBy { ID } type NotificationOps { updateStatus(ids: [ID!], status: NotificationStatus! = READ): Boolean! @goField(forceResolver: true) markAsReadAll: Boolean! @goField(forceResolver: true) updateNotificationToken(token: String, removed: Boolean!=false, chatConversationID: Int64): Boolean! @goField(forceResolver: true) } type NotificationPaginationResponse{ notification: [Notification] paginationData: PaginationData! } type Notification { id: ID! title: String! body: String! redirectURL: String # global url when user click to the notification; can be a link to a landing page, an (updated) order; a promotion, etc imageURL: String # image url of notification userID: ID! user: User @goField(forceResolver: true) status: NotificationStatus! createdAt: Timestamp! updatedAt: Timestamp! } type OrderOps { create(cartID: ID!, needCheckStock: Boolean! = false): Order @goField(forceResolver: true) @staffSecured confirmUpdateDetail(orderID: ID!): Boolean! @goField(forceResolver: true) @staffSecured cloneCartUpdateDetail(orderID: ID!): Cart @goField(forceResolver: true) @staffSecured cancelUpdateDetail(orderID: ID!): Boolean! @goField(forceResolver: true) @staffSecured updateStatus(orderIDs: [ID!]!, newStatus: OrderStatus!): Boolean! @goField(forceResolver: true) @staffSecured changeStatus(orderIDs: [ID!]!, action: OrderEventType!): Boolean! @goField(forceResolver: true) @staffSecured approveStock(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured waitStock(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured denyStock(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured confirmPayment(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured @deprecated(reason: "using approvePayment() instead of") approvePayment(orderID: ID!, paymentProofs: [String!]): Boolean! @goField(forceResolver: true) @staffSecured confirmDeliverShippingProvider(orderIDs: [ID!]!, imageURLs: [String!]): Boolean! @goField(forceResolver: true) @staffSecured confirmCustomerPicked(orderIDs: [ID!]!, imageURLs: [String!]): Boolean! @goField(forceResolver: true) @staffSecured package(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured export(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured assembly(orderIDs: [ID!]!): Boolean! @goField(forceResolver: true) @staffSecured deliver(orderID: ID, orderIDs: [ID!], shipperID: ID!): Boolean! @goField(forceResolver: true) @staffSecured updateShipper(orderIDs: [ID!], shipperID: ID!): Boolean! @goField(forceResolver: true) @staffSecured confirmPickedForShipping(orderIDs: [ID!]): Boolean! @goField(forceResolver: true) @staffSecured complete(orderID: ID!, imageURLs: [String!], images: [Upload!]): Boolean! @goField(forceResolver: true) @staffSecured cancel(orderIDs: [ID!], reason: String): Boolean! @goField(forceResolver: true) @staffSecured exportFile(orderID: ID, orderIDs: [ID!], fileType: ExportFileType!): FileType! @goField(forceResolver: true) @staffSecured syncOrderToShippingProvider(orderID: ID!): String! @goField(forceResolver: true) @staffSecured complain(auth: OrderAuth, request: ComplainRequest): ID! @goField(forceResolver: true) uploadAndUpdateFiles(orderID: ID!, newFiles: [Upload!], oldFileURLs: [String!]): Boolean! @goField(forceResolver: true) @staffSecured split(orderID: ID!, request: [SplitOrderInput!]): [Order] @goField(forceResolver: true) @staffSecured approveOrder(orderIDs: [ID!]!, updateWarehouseID: ID): Boolean! @goField(forceResolver: true) @staffSecured createOrderToShippingProvider(request: CreateOrderToShippingProviderInput): Boolean! @goField(forceResolver: true) @staffSecured setDeliveryDeadline(orderID: ID!, input: SetDeliveryDeadlineInput!): Boolean! @goField(forceResolver: true) } type TotalOrderByStatus { all: Int64! waitingForApprovalStock: Int64! waitingForEnoughStock: Int64! waitingForPayment: Int64! waitingForPackaging: Int64! waitingForExporting: Int64! waitingForAssembly: Int64! waitingForShipping: Int64! delivering: Int64! completed: Int64! canceled: Int64! waitingForApprovalOrder: Int64! } type OrderQuery { totalByStatus: TotalOrderByStatus @goField(forceResolver: true) @staffSecured count(filters: OrdersFilters): Int64! @goField(forceResolver: true) @staffSecured pagination( filters: OrdersFilters! = {}, sort: [OrderSort!], pagination: PaginationRequest! = {offset: 0, limit: 10}, ): OrdersResponse @goField(forceResolver: true) @staffSecured get(id: ID!): Order @goField(forceResolver: true) @staffSecured getEvents(id: ID!): [OrderEvent!]! @goField(forceResolver: true) @staffSecured getByCodeAndPhone(orderCode: String!, phoneNumber: String!, platformCode: String): Order @goField(forceResolver: true) getComplain(auth: OrderAuth): Complain @goField(forceResolver: true) } type SellerOrderQuery { get(id: ID!): Order @goField(forceResolver: true) getPaymentContent(orderID: ID, method: PaymentMethod!): String! @goField(forceResolver: true) @deprecated(reason: "using getBankTransferAccounts() and getBankTransferAccountDetail() instead of") pagination(filters: SellerOrdersFilters! = {}, pagination: PaginationRequest! = {offset: 0, limit: 10}, ): OrdersResponse @goField(forceResolver: true) count(filters: OrdersFilters): Int64! @goField(forceResolver: true) @sellerSecured getBankTransferAccounts(orderID: ID, sellerPaymentMethod: SellerPaymentMethod): [BankTransferAccount!] @goField(forceResolver: true) @sellerSecured #orderId will take priority getBankTransferAccountDetail(bankAccountID: ID!, orderID: ID, sellerPaymentMethod: SellerPaymentMethod): BankTransferAccount @goField(forceResolver: true) @sellerSecured #orderId will take priority } type SellerOrderOps { create(cartId: ID!, needCheckStock: Boolean! = true): Order @goField(forceResolver: true) @deprecated(reason: "No longer supported, use createOrderV2") createOrderV2(cartID: ID!, needCheckStock: Boolean! = true): CreateOrderResponse @goField(forceResolver: true) cancel(orderIDs: [ID!], reason: String): Boolean! @goField(forceResolver: true) sellerConfirmPayment(orderID: ID!, bankAccountID: ID!, paymentProofs: [String!]): Boolean! @goField(forceResolver: true) } input OrderSort { by: OrderSortBy! = CREATED_AT orderType: SortType! = DESC } enum OrderSortBy { UPDATED_AT CREATED_AT GRAND_TOTAL PROMISED_DELIVER_TIME DELIVER_DEADLINE COD_CREATED_AT COD_RECEIVED_AT } enum SortType { ASC DESC } type OrdersResponse { totalAccountingVoucher: TotalAmountOfCheckedStatus @goField(forceResolver: true) orders: [Order!] paginationData: PaginationData! lastUpdatedDate: Timestamp! } input SellerOrdersFilters { statuses: [OrderStatus!] query: String! = "" } input OrdersFilters { ids: [ID!] statuses: [OrderStatus!] digitalStatuses: [OrderDigitalStatus!] # time range: time range have higher priority than period timeRange: TimeRangeFilter # search by name/code query: String! = "" # period period: Period exportedWarehouseIDs: [ID!] sellerIDs: [ID!] priorities: [OrderPriority!] fullStockRequired: Boolean assemblyRequired: Boolean shippingTypes: [ShippingType!] vat: Boolean paymentMethods: [PaymentMethod!] createdByIDs: [ID!] stockStatus: StockStatus shippingStatus: ShippingStatus saleChannelIDs:[ID!] codStatus: AccountingVoucherStatus codType : AccountingVoucherType branchID : ID preOrder: Boolean paymentStatuses: [OrderPaymentStatus!] cancelReasons: CancelOrderReasons sentDigitalByIDs: [ID!] clientTime: Timestamp } enum OrderStatus { WAITING_FOR_APPROVAL_ORDER WAITING_FOR_APPROVAL_STOCK WAITING_FOR_ENOUGH_STOCK WAITING_FOR_PAYMENT WAITING_FOR_PACKAGING WAITING_FOR_EXPORTING WAITING_FOR_ASSEMBLY WAITING_FOR_SHIPPING DELIVERING COMPLETED CANCELED } enum OrderPaymentStatus { PENDING WAITING_APPROVAL PAID } interface GenericOrderItem { id: ID! productID: ID! # main product of combo/ product of order item, to do rename product: Product! @goField(forceResolver: true) productName: String! productCode: String! productWarranty: Int warrantyDateUnit : DatePeriodUnit warrantyType : WarrantyType #todo implement core lam.nt orderID: ID! order: Order! @goField(forceResolver: true) # quantity of combo/ quantity of order item, to do rename quantity: Int64! price: Int64! customerPrice: Int64 vat: Boolean! total: Int64! @goField(forceResolver: true) customerTotal: Int64 maxDaysOfDebt: Int64 inStock: Float @goField(forceResolver: true) realInStock : Int64 @goField(forceResolver: true) warrantyNotes :[WarrantyNote!] @goField(forceResolver: true) promotionTag: PromotionTag campaignInfo: CampaignInfo } type ComboOrderItem implements GenericOrderItem{ id: ID! # to do rename, main product productID: ID! product: Product! @goField(forceResolver: true) productName: String! productCode: String! productWarranty: Int warrantyDateUnit : DatePeriodUnit warrantyType : WarrantyType #todo implement core lam.nt orderID: ID! order: Order! @goField(forceResolver: true) # to do rename, quantity of combo quantity: Int64! price: Int64! customerPrice: Int64 vat: Boolean! total: Int64! @goField(forceResolver: true) customerTotal: Int64 maxDaysOfDebt: Int64 inStock: Float @goField(forceResolver: true) realInStock : Int64 @goField(forceResolver: true) warrantyNotes :[WarrantyNote!] @goField(forceResolver: true) comboOrderItemID: ID promotionTag: PromotionTag campaignInfo: CampaignInfo # expand for combo orderItems(showOriginComboItemQuantity: Boolean! = true): [OrderItem!] @goField(forceResolver: true) promoTierID: ID! promoTier: PromotionCampaignTier @goField(forceResolver: true) discountMoney: Int64! } enum OrderItemDataType { ORDER_ITEM COMBO_ORDER_ITEM } enum ShippingVersion { V1 V2 } enum OrderDigitalStatus { WAITING_SEND_CUSTOMER COMPLETED CANCELED } enum CompletedType { FULLY PARTIALLY } type Order { id: ID! email: String status: OrderStatus! orderReconciliationStatus: OrderReconciliationStatus @goField(forceResolver: true) completedType: CompletedType digitalStatus: OrderDigitalStatus stockStatus: StockStatus! @goField(forceResolver: true) number: String! accountingNumber: String formattedNumber: String! @goField(forceResolver: true) items(productType: ProductType, itemDataType: OrderItemDataType = ORDER_ITEM): [GenericOrderItem!] @goField(forceResolver: true) sellerID: ID! seller: Seller! @goField(forceResolver: true) createdByID: ID! createdBy: User! @goField(forceResolver: true) note: String internalNote: String shippingType: ShippingType! shippingConfiguration: ShippingConfiguration orderPriority: OrderPriority! promisedDeliverTime: Timestamp @deprecated(reason: "Use field 'deliveryDeadline' instead of this field") remainingDeliverTime: Float @goField(forceResolver: true) deliveryDeadline: Timestamp """ chatURL is used to redirect to Chatwoot so that staff can chat with seller """ chatURL: String fullStockRequired: Boolean! assemblyRequired: Boolean shippingFee: Int64! serviceFee: Int64 #to do remove customerShippingFee: Int64! discount: Int64! cartID : ID! cart : Cart! @goField(forceResolver: true) exportedWarehouseID: ID! exportedWarehouse: Warehouse! @goField(forceResolver: true) vat: Boolean! @goField(forceResolver: true) vatTaxIDNumber: String vatCompanyName: String vatEmail: String vatAddress: String customerVatIDNumber: String vatCustomerName: String customerVatEmail: String customerVatAddress: String totalServiceProduct : Int64! @goField(forceResolver: true) customerTotalServiceProduct : Int64! @goField(forceResolver: true) quantityServiceProduct : Int64!@goField(forceResolver: true) subTotal(promotionID: ID): Int64! @goField(forceResolver: true) totalPromotionDiscountMoney: Int64! @goField(forceResolver: true) total: Int64! # total money seller/customer need to pay us finalPayAmount: Int64! codAmount: Int64! @goField(forceResolver: true) customerSubTotal: Int64 customerTotal: Int64 totalProduct: Int64! paymentMethod: PaymentMethod! shippingStatus: ShippingStatus shippingVersion: ShippingVersion cashPayment: Int64! debtPayment: Int64! fileURLs: [String!] completedAt: Timestamp shipperTelephone: String! @goField(forceResolver: true) shipperName: String @goField(forceResolver: true) shipperID: ID fullEvents(userType: UserType = STAFF): [FullOrderEvent] @goField(forceResolver: true) fullSellerEvent: [FullOrderEvent] @goField(forceResolver: true) deniedStock: Boolean! vatAllOrder: Boolean! @goField(forceResolver: true, omitField: true) orderType: OrderType customerPaymentMethod: CustomerPaymentMethod createdAt: Timestamp! updatedAt: Timestamp! paymentTerm: Timestamp representItem: OrderItem! @goField(forceResolver: true) cancelable: Boolean! @goField(forceResolver: true) cancelReason: String @goField(forceResolver: true) shippingOrderCode: String parentID: ID parent: Order @goField(forceResolver: true) children: [Order] @goField(forceResolver: true) paymentInfoID: ID! paymentInfo: OrderPayment @goField(forceResolver: true) shareLink: String! @goField(forceResolver: true) sellerActions: [OrderAction!] @goField(forceResolver: true) # available actions seller can take saleChannelID: ID! saleChannel: SaleChannel @goField(forceResolver: true) updatingCartID: ID updatingCart: Cart @goField(forceResolver: true) # codAccountingVoucher: AccountingVoucher @goField(forceResolver: true) codInformation: CODInformation @goField(forceResolver: true) branchID: ID branch: Branch @goField(forceResolver: true) orderParcel: OrderParcel @goField(forceResolver: true) # orderPromotionItems: [OrderPromotionItem!] @goField(forceResolver: true) //useless paymentProofUrls: [String!] @goField(forceResolver: true) paymentDeadline: Timestamp # order payment deadline paymentStatus: OrderPaymentStatus sentDigitalBy: User @goField(forceResolver: true) isMixedVatOrder: Boolean @goField(forceResolver: true) serialExportNoteLatest: SerialExportNote @goField(forceResolver: true) sellerProfitAmountBeforeCost: Int64! @goField(forceResolver: true) sellerProfitAmount: Int64! voucherID: ID voucher: Voucher @goField(forceResolver: true) sellerVoucher: SellerVoucher @goField(forceResolver: true) } extend type Order { quantityKindOfProduct : Int64@goField(forceResolver: true) quantitySerial : Int64@goField(forceResolver: true) preOrder: Boolean! @goField(forceResolver: true) } type CODInformation { # general cod information status: AccountingVoucherStatus! expectAmount: Int64! realAmount: Int64 deviantAmount : Int64 @goField(forceResolver: true) receiveDate: Timestamp createdAt : Timestamp # related accounting information refAccountingVoucherID: ID accountingVoucher: AccountingVoucher @goField(forceResolver: true) } enum OrderAction { CANCEL CONFIRM_SELLER_PAYMENT CONTACT RECREATE_CART } type FullOrderEvent { state: FullOrderEventState! name: String! createdAt: Timestamp createdByID: ID createdBy: User @goField(forceResolver: true) } enum FullOrderEventState { FUTURE CURRENT PAST } enum StockStatus { FULL LACK OUT_OF_STOCK PRE_ORDER } enum ShippingStatus { WAITING CONFIRM_PICKED NOT_SET } #all info about receiver extend type Order { receiverContactID: ID! receiverContactName: String! receiverContactPhone: String! receiverContactAddress: String! receiverContact: Contact! @goField(forceResolver: true) } #all info about sender extend type Order { senderName: String! senderPhone: String! senderAddress: String! } type OrderItem implements GenericOrderItem{ id: ID! productID: ID! product: Product! @goField(forceResolver: true) productName: String! productCode: String! productWarranty: Int warrantyDateUnit : DatePeriodUnit warrantyType : WarrantyType #todo implement core lam.nt orderID: ID! order: Order! @goField(forceResolver: true) quantity: Int64! price: Int64! originalPrice: Int64! customerPrice: Int64 vat: Boolean! total: Int64! @goField(forceResolver: true) customerTotal: Int64 maxDaysOfDebt: Int64 inStock: Float @goField(forceResolver: true) realInStock : Int64 @goField(forceResolver: true) warrantyNotes :[WarrantyNote!] @goField(forceResolver: true) comboOrderItemID: ID comboOrderItem: ComboOrderItem @goField(forceResolver: true) preOrder: Boolean! isGift: Boolean! productDiscount: Int64 promotionTag: PromotionTag campaignInfo: CampaignInfo captureRegionStockStatus: RegionStockStatus! productVat: Boolean! captureProductStockStatus: ProductStockStatus! } enum OrderEventType { Unspecified UpdateInfo Create ApproveStock WaitStock DenyStock ConfirmPayment ApprovePayment Package Export Assembly Deliver Complete Cancel ApproveOrder ShippingProviderReturned SellerConfirmPayment } type OrderEvent { id: ID! orderID: ID! eventType: OrderEventType! order: Order! @goField(forceResolver: true) createdByID: ID createdBy: User @goField(forceResolver: true) note: String createdAt: Timestamp! updatedAt: Timestamp! } type Complain { id: ID! orderID: ID! code: String! complainEvents: [ComplainEvent!] @goField(forceResolver: true) items: [OrderItem!]! @goField(forceResolver: true) status: ComplainStatus! reason: ComplainReason! description: String demand: ComplainDemand! total: Int64! paymentMethod: PaymentMethod! attachmentURLs: [String!]! createdAt: Timestamp! updatedAt: Timestamp! } type ComplainEvent { id: ID! event : ComplainEventType! complainID : ID createdAt: Timestamp! updatedAt: Timestamp! } input ComplainRequest { itemIDs: [ID!]! reason: ComplainReason! description: String demand: ComplainDemand! total: Int64! paymentMethod: PaymentMethod! attachmentURLs: [String!]! } enum ComplainReason { LOW_QUALITY #1/ Hàng kém chất lượng, không như mô tả WRONG_ATTRIBUTE #2/ Sản phẩm sai màu, sai kích cỡ/ kích thước BROKEN #3/ Hàng bị lỗi, bể vỡ, móp méo FAKE #4/ Hàng giả, hàng nhái OUT_DATE #5/ Giao nhầm sản phẩm Sản phẩm hết hạn sử dụng ERROR #6/ Sản phẩm lỗi không sử dụng được SECOND_HAND #7/ Sản phẩm đã qua sử dụng DELAY_DELIVER #8/ Giao trễ INSUFFICIENT #9/ Giao thiếu sản phẩm WARRANTY_REQUIRED #10/ Yêu cầu bảo hành sản phẩm } enum ComplainDemand { SWAP REFUND_A_PART BACK_UP_AND_REFUND WARRANTY } input OrderAuth { orderCode: String! phoneNumber: String! } enum ComplainStatus { CREATE RECEIVING PROCESSING COMPLETED } enum ComplainEventType { CREATE RECEIVE PROCESS COMPLETE } input SplitOrderInput { items: [SplitOrderItem!] code: String! discount: Int64! shippingFee: Int64! } input SplitOrderItem { productID: ID! productCode: String! productType: ProductType! quantity: Int64! price: Int64! customerPrice: Int64 } enum SplitOrderType { EnoughStock NotEnoughStock } type OrderPayment { id: ID! bankAccountID: ID bankAccount: BankAccount @goField(forceResolver: true) sellerConfirmPaid: Boolean! createdAt: Timestamp! updatedAt: Timestamp! } type OrderParcel{ id: ID! orderID: ID! carrierMethod: CarrierMethod! shippingProviderID: Int64! shippingProvider: ShippingProvider shippingProviderServiceCode: String! shippingProviderServiceName: String shippingStatus: String shippingProviderStatus: String trackingCode: String! trackingUrl: String estimatedDeliveryDate: Timestamp deliveryDate: Timestamp shippingCost: Int64! totalItems: Int64! isActive: Boolean! createdAt: Timestamp! updatedAt: Timestamp! } input CreateOrderToShippingProviderInput { orderID: ID! providerID: ID! method: CarrierMethod! shipperID: ID } enum CancelReasonSeller { """ Thay đổi thông tin đơn hàng """ CHANGE_ORDER_INFORMATION """ Thay đổi sản phẩm trong đơn hàng """ CHANGE_PRODUCTS_IN_ORDER """ Tìm thấy chỗ khác mua tốt hơn """ FIND_A_BETTER_PLACE_TO_BUY """ Thời gian nhận hàng quá lâu """ DELIVERY_TIME_IS_TOO_LONG """ Không có nhu cầu mua nữa """ NO_NEED_TO_BUY_ANY_MORE """ Lý do khác """ OTHER_SELLER } enum CancelReasonStaff { """ Không đủ tồn """ NOT_ENOUGH """ Không đủ hạn mức công nợ """ NOT_ENOUGH_DEBT_LIMIT """ Không nhập được hàng """ CANNOT_IMPORT_GOODS """ Không thể bán hàng với đơn giá hiện tại """ SALE_CANNOT_BE_AT_CURRENT_UNIT_PRICE """ Quá hạn thanh toán đơn hàng """ OVERDUE_ORDER_PAYMENT """ Thay đổi thông tin đơn hàng """ CHANGE_ORDER_INFORMATION_STAFF """ Thay đổi sản phẩm trong đơn hàng """ CHANGE_PRODUCTS_IN_ORDER_STAFF """ Khách hàng không có nhu cầu mua nữa """ CUSTOMERS_CHANGE_MIND_AND_DONT_BUY_ANYMORE """ Lý do khác """ OTHER_STAFF } input CancelOrderReasons { seller: [CancelReasonSeller!] staff: [CancelReasonStaff!] } type CreateOrderResponse { order: Order message: String actions: [CartAction!] result: Boolean! }type OrderReconcilationOps { updateStatus(reconcilationID: [ID!]!, actionType: OrderReconcilationActionType!): Boolean! @goField(forceResolver: true) @staffSecured reject(reconcilationID: ID!, reasonInput: RejectReconcilationOrderInput!): Boolean! @goField(forceResolver: true) @staffSecured cancel(reconcilationID: ID!, reasonInput: CancelReconcilationOrderInput!): Boolean! @goField(forceResolver: true) @staffSecured } type OrderReconciliationQuery { pagination( filters: OrderReconciliationFilter! = {}, sort: [OrderReconcilationSort!], pagination: PaginationRequest ): OrderReconcilationResponse @goField(forceResolver: true) # Danh sach doi soat loi nhuan get(id: ID!): OrderReconciliation @goField(forceResolver: true) @staffSecured count(filters: OrderReconciliationFilter): Int64! @goField(forceResolver: true) } type SellerOrderReconcilationQuery { listCollectionAmounts( filters: CollectionAmountsFilter! = {} ): SellerCollectionAmountsResponse @goField(forceResolver: true) # Danh sach tien thu ho } type SellerCollectionAmountsResponse { orderReconcilations: [OrderReconciliation!] totalAmount: Int64 } type OrderReconcilationResponse { orderReconcilations: [OrderReconciliation!] paginationData: PaginationData } type OrderReconciliation { id: ID! orderID: ID! order: Order! @goField(forceResolver: true) status: OrderReconciliationStatus! expiredDate: Timestamp completedDate: Timestamp @goField(forceResolver: true) sellerProfitAmount: Int64! sellerCollectionAmount: Int64! sellerCollectionAmountStatus: OrderSellerCollectionAmountStatus! fullEvents: [OrderReconciliationEventProgress!] @goField(forceResolver: true) updatedByID: ID updatedBy: User @goField(forceResolver: true) rejectedReason: rejectedReasonReconciliation @goField(forceResolver: true) } enum OrderReconciliationStatus { WAITING_FOR_PAYMENT RECONCILING COMPLETED REJECTED CANCELED } enum ReconciliationCompletedDateStatus{ ON_TIME OVERDUE } enum ReconciliationExpiredDateStatus{ REMAINING OVERDUE NOT_COMPLETED } enum OrderSellerCollectionAmountStatus { WAITING_FOR_RECONCILATION RECONCILED } type rejectedReasonReconciliation { reason: String causes: [RejectReconcilationOrderCause!] } input RejectReconcilationOrderInput { reason: String cause: RejectReconcilationOrderCause } enum RejectReconcilationOrderCause{ CUSTOMER_REQUEST_RETURN_WITHIN_X_DAYS PROBLEM_POLICY_COLLABORATOR_SELLER } input CancelReconcilationOrderInput { reason: String causes: CancelReasonStaff } enum OrderReconcilationActionType { START COMPLETE REJECT CANCEL } input OrderReconciliationFilter { query: String! = "" paymentMethods: [PaymentMethod!] saleChannelIDs: [ID!] completedDateStatuses: [ReconciliationCompletedDateStatus!] expiredDateStatuses: [ReconciliationExpiredDateStatus!] reconciliationStatuses: [OrderReconciliationStatus!] sellerIDs: [ID!] orderStatuses: [OrderStatus!] timeRange: TimeRangeFilter staffInChargeIDs: [ID!] currentTime: String } input CollectionAmountsFilter { collectionAmountStatuses: [OrderSellerCollectionAmountStatus!] query: String = "" timeRange: TimeRangeFilter } input OrderReconcilationSort { by: OrderReconcilationSortBy! = CREATED_AT orderType: SortType! = DESC } enum OrderReconcilationSortBy { CREATED_AT } type OrderReconciliationEvent { ID: Int64! ObjectID: Int64! EventType: OrderReconcilationActionType! Reason: String Causes: [RejectReconcilationOrderCause!] CreatedByID: Int64 CreatedBy: User CreatedAt: Timestamp UpdatedAt: Timestamp } type OrderReconciliationEventProgress { state: FullEventState name: String! createdAt: Timestamp createdByID: ID createdBy: User @goField(forceResolver: true) } type PlatformQuery { get: Platform @goField(forceResolver: true) } type Platform { id: ID! name: String code: String! logoURL: String bannerURL: String exportedVAT: Boolean! }type PotentialCustomerOps{ batchCreate(file: Upload!): BatchCreatePotentialCustomerResponse! @goField(forceResolver: true) create(request: PotentialCustomerInput!): PotentialCustomer! @goField(forceResolver: true) createCommunicationLog(request: CommunicationLogInput!): Boolean! @goField(forceResolver: true) link(customerID: ID!, existedCustomerID: ID, existedSellerID: ID): PotentialCustomer! @goField(forceResolver: true) update(id: ID!, request: PotentialCustomerInput!): PotentialCustomer! @goField(forceResolver: true) # change status complete(customerIDs: [ID!]): Boolean! @goField(forceResolver: true) confirmTakingCare(customerIDs: [ID!], careStaffID: ID!): Boolean! @goField(forceResolver: true) desist(customerIDs: [ID!], reason: DesistReasonInput!): Boolean! @goField(forceResolver: true) recontact(customerIDs: [ID!]): Boolean! @goField(forceResolver: true) approve(customerID: ID!, request: ApprovalInput!): Boolean! @goField(forceResolver: true) reject(customerIDs: [ID!], reason: RejectReasonInput!): Boolean! @goField(forceResolver: true) } type PotentialCustomerQuery{ get(id: ID!): PotentialCustomer @goField(forceResolver: true) getActivityLogs(customerID: ID!): PotentialCustomerLogsResponse @goField(forceResolver: true) getBatchCreateExampleFile(isExample: Boolean! = true): FileType! @goField(forceResolver: true) getLinkableCustomers(filters: PotentialCustomerFilters! = {}, pagination: PaginationRequest! = {limit: 10, offset: 0}): LinkableCustomerResponse @goField(forceResolver: true) pagination(filters: PotentialCustomerFilters! = {}, pagination: PaginationRequest! = {limit: 10, offset: 0}): PotentialCustomerPaginationResponse @goField(forceResolver: true) count(filters: PotentialCustomerFilters): Int64! @goField(forceResolver: true) @staffSecured } input CommunicationLogInput { createdAt: Timestamp! createdByID: ID! customerID: ID! fileUrls: [String!] note: String type: PotentialCustomerCommunicationType } input DesistReasonInput { defaultReason: DesistReason! otherReason: String } input RejectReasonInput { defaultReason: RejectPotentialCustomerReason! note: String } input PotentialCustomerFilters { IDFilter: IDFilter! = {} careStaffIDFilter: CareStaffIDFilter! = {} createdByIDs: [ID!] dataSources: [DataSource!] inChargeStaffIDFilter: InChargeStaffIDFilter! = {} priorityFilter: PotentialCustomerPriorityFilter ! = {} query: String # email, name, telephone statuses: [PotentialCustomerStatus!] types: [SellerType!] # validate fields isValidate: Boolean! = false emails: [String!] idNumbers: [String!] telephones: [String!] vatNumbers: [String!] } input IDFilter { filterType: FilterType! = ALL IDs: [ID!] } input CareStaffIDFilter { filterType: FilterType! = ALL careStaffIDs: [ID!] } input InChargeStaffIDFilter { filterType: FilterType! = ALL inChargeStaffIDs: [ID!] } input PotentialCustomerPriorityFilter { filterType: FilterType! = ALL priorities: [PotentialCustomerPriority!] } input PotentialCustomerInput { address: String careStaffID: ID cityID: ID dataSource: DataSource! districtID: ID email: String expectedRevenue: Int64 fullName: String! # is company name for company type idNumber: String interestedCategoryIDs: [ID!] inChargeStaffID: ID legalRepresentativeName: String legalRepresentativeEmail: String legalRepresentativeTelephone: String note: String priority: PotentialCustomerPriority registeredBusinessAddress: String representativeName: String representativeEmail: String representativeTelephone: String telephone: String type: SellerType! vatNumber: String wardID: ID } type BatchCreatePotentialCustomerResponse { status: Boolean! errorType: BatchCreateError! errorMessage: String file: FileType } type LinkableCustomer { id: ID! address: String fullName: String email: String telephone: String status: PotentialCustomerStatus! type: LinkableCustomerType! sellerType: SellerType! potentialCustomerID: ID potentialCustomer: PotentialCustomer @goField(forceResolver: true) sellerID: ID seller: Seller @goField(forceResolver: true) } type PotentialCustomer { id: ID! address: String dataSource: DataSource desistReason: String rejectedReason: String email: String expectedRevenue: Int64 fullName: String! idNumber: String legalRepresentativeName: String legalRepresentativeEmail: String legalRepresentativeTelephone: String note: String priority: PotentialCustomerPriority registeredBusinessAddress: String representativeName: String representativeEmail: String representativeTelephone: String status: PotentialCustomerStatus! telephone: String type: SellerType! vatNumber: String careStaffID: ID careStaff: User @goField(forceResolver: true) cityID: ID city: City @goField(forceResolver: true) createdByID: ID createdBy: User @goField(forceResolver: true) districtID: ID district: District @goField(forceResolver: true) inChargeStaffID: ID inChargeStaff: User @goField(forceResolver: true) interestedCategories: [Category!] @goField(forceResolver: true) sellerID: ID seller: Seller @goField(forceResolver: true) # linked onboarding seller wardID: ID ward: Ward @goField(forceResolver: true) createdAt: Timestamp! updatedAt: Timestamp! } type PotentialCustomerLog { communicationType: PotentialCustomerCommunicationType fileUrls: [String!] eventType: PotentialCustomerEventType linkAccountEmail: String nextStatus: PotentialCustomerStatus note: String previousStatus: PotentialCustomerStatus desistReason: String rejectReason: String title: String type: PotentialCustomerLogType! createdByID: ID createdBy: User @goField(forceResolver: true) createdAt: Timestamp! } type PotentialCustomerLogsResponse { potentialCustomerLogs: [PotentialCustomerLog] paginationData: PaginationData! } type PotentialCustomerPaginationResponse { customers: [PotentialCustomer] paginationData: PaginationData! } type LinkableCustomerResponse { customers: [LinkableCustomer] paginationData: PaginationData! } enum DataSourceInput { FACEBOOK GOOGLE ZALO MASOTHUE SHOPEE } enum DataSource { FACEBOOK GOOGLE ZALO MASOTHUE SHOPEE SELLER_APP SELLER_WEB } enum DesistReason { NO_DEMAND NO_INTERESTED_CATEGORY HAD_ACCOUNT OTHER } enum RejectPotentialCustomerReason { MISSING_INFO INVALID_INFO OTHER } enum BatchCreateError { NO_ERROR WRONG_FORMAT LIMIT_EXCEEDED } enum FilterType { ALL INCLUDE EXCLUDE INCLUDE_NULL EXCLUDE_NULL } enum LinkableCustomerType { POTENTIAL_CUSTOMER SELLER } enum PotentialCustomerLogType { UPDATE_CUSTOMER_STATUS COMMUNICATE } enum PotentialCustomerCommunicationType { CALL MESSAGE EMAIL MEET } enum PotentialCustomerPriority { HIGH LOW } enum PotentialCustomerStatus { NEW TAKING_CARE STOP_CARING COMPLETE_CARING APPROVED_SELLER } enum PotentialCustomerEventType { CREATE CONFIRM_TAKE_CARE DESIST RECONTACT COMPLETE APPROVE_SELLER REJECT_SELLER MERGE } type PriceBidSessionQuery { get(id: ID!): PriceBidSession @goField(forceResolver: true) getTotalStatus: TotalPriceBidSessionByStatus @goField(forceResolver: true) pagination( filters: PriceBidSessionFilters, sort :[PriceBidSessionSort!] = {by: UPDATED_AT , sortType: DESC}, pagination: PaginationRequest! = {limit: 100, offset: 0}, ): PriceBidSessionResponse @goField(forceResolver: true) } type PriceBidSessionOps { createNewBid(request: CreateNewBidInput) : Boolean! @goField(forceResolver: true) approve(priceBidSessionID : ID!) : Boolean! @goField(forceResolver: true) reject(priceBidSessionID: ID!): Boolean! @goField(forceResolver: true) } type PriceBidSessionSellerQuery { get(id: ID!): PriceBidSession @goField(forceResolver: true) } type PriceBidSessionSellerOps { create(request: PriceBidSessionCreateInput): PriceBidSessionCreateResponse! @goField(forceResolver: true) createNewBid(request: CreateNewBidInput) : Boolean! @goField(forceResolver: true) approve(priceBidSessionID : ID!) : Boolean! @goField(forceResolver: true) } type PriceBidSessionCreateResponse { priceBidSessionID : ID! } input CreateNewBidInput { priceBidSessionID : ID! suggestQuantity: Int64! suggestPrice : Int64! } input PriceBidSessionCreateInput { cartItemID : ID! productID: ID! suggestQuantity: Int64! suggestPrice : Int64! } input PriceBidSessionFilters { query : String sellerIDs: [ID!] timeRange : TimeRangeFilter status: [PriceBidSessionStatus!] ownerType : [UserType!] productIDs: [ID] """ Hành động """ lastEventTypes: [PriceBidSessionEventType!] lastPerformUsers: LastPerformUserFilter! = {} lastPerformUserIDs: [ID!] lastPerformUserTypes: [UserType!] isCompleted: Boolean @deprecated(reason: "Use COMPLETED status filter instead") } input LastPerformUserFilter { ids: [ID!] types: [UserType!] } input PriceBidSessionSort { by: PriceBidSessionSortBy! = UPDATED_AT sortType: SortType! = DESC } enum PriceBidSessionSortBy { ID CREATED_AT UPDATED_AT } enum PriceBidSessionStatus { WAITING_FOR_STAFF_CONFIRM WAITING_FOR_SELLER_CONFIRM APPROVED REJECTED COMPLETED CANCELED } type PriceBidSessionResponse { priceBidSessions: [PriceBidSession!] paginationData: PaginationData! } type PriceBidSession { id : ID! cartItemID : ID cartItem : CartItem @goField(forceResolver: true) productID : ID! product : Product @goField(forceResolver: true) sellerID : ID! seller : Seller @goField(forceResolver: true) status : PriceBidSessionStatus! ownerType : UserType! currentSuggestedQuantity : Int64! currentSuggestedPrice : Int64! originalPrice : Int64! @goField(forceResolver: true) createdByID : ID! createdBy : User @goField(forceResolver: true) events :[PriceBidSessionEvent!] @goField(forceResolver: true) isCompleted: Boolean createdAt: Timestamp updatedAt: Timestamp } type PriceBidSessionEvent { id : ID! priceBidSessionID : ID! priceBidSession : PriceBidSession @goField(forceResolver: true) eventType : PriceBidSessionEventType! ownerType : UserType! suggestedQuantity : Int64! suggestedPrice : Int64! createdByID : ID! createdBy : User @goField(forceResolver: true) reason: String createdAt: Timestamp updatedAt: Timestamp } type TotalPriceBidSessionByStatus { all: Int64! waitingForStaffConfirm: Int64! waitingForSellerConfirm: Int64! approved: Int64! rejected: Int64! completed: Int64! cancelled: Int64! } type ProductQuery { pagination(filters: ProductsFilters, pagination: PaginationRequest): ProductsResponse @goField(forceResolver: true) get(id: ID!): Product @goField(forceResolver: true) getByVariantAttribute(productID: ID!, variantAttributeValueIDs: [ID!]! @binding(constraint: "min=1")): Product @goField(forceResolver: true) getImportFile(filters: ProductsFilters): GetImportProductPricesFileResponse @goField(forceResolver: true) priceLogs(filters: PriceLogsFilter, pagination: PaginationRequest!={offset: 0, limit: 10}): PriceLogsResponse @goField(forceResolver: true) checkDuplicatedProduct(productCode: String!): CheckDuplicatedProductResponse! @goField(forceResolver: true) getSampleFile(productType: ProductType!): FileType! @goField(forceResolver: true) } input PriceLogsFilter { query: String! = "" # optional full text search if query is not empty categoryIDs: [ID!] # optional filter by categories createdByIDs: [ID!] # optional filter by creators if not-empty orderBy: PriceLogOrderBy! = CREATED_AT_DESC # required order_by with default value createdAtFilter: TimeRangeFilter! = {}, # default value make an easy life for FE/test productIDs :[ID!] } type SellerProductQuery { popular(limit: Int! = 10): [SellerProduct!] @goField (forceResolver: true) search(option: SearchParam!= {}, pagination: PaginationRequest!={offset: 0, limit: 10}): SearchResponse @goField(forceResolver: true) getListSimilar(option: SearchParam!= {}, pagination: PaginationRequest!={offset: 0, limit: 10}): SearchResponse @goField(forceResolver: true) # called in case search api has not result returned get(id: ID!): SellerProduct @goField(forceResolver: true) getByVariantAttribute(productID: ID!, variantAttributeValueIDs: [ID!]! @binding(constraint: "min=1")): SellerProduct @goField(forceResolver: true) getAllProductFilter(filterType: ProductFilterTypeInput! = {}): SellerProductFilter! @goField(forceResolver: true) } type SellerProductCollectionQuery { list: [ProductCollection!] @goField(forceResolver: true) } type PriceLogsResponse { priceLogs: [PriceLog!] paginationData: PaginationData! } type ProductCollection { id: ID! name: String! type: ProductCollectionType! description: String iconURL: String backgroundColor: String titleColor: String! navigateListButtonColor: String! backgroundImageURL: String displayType: DisplayType! items(limit: Int64! = 10): [SellerProduct!] @goField(forceResolver: true) @deprecated(reason: "use search api") list: [SellerProduct!] @goField(forceResolver: true) @deprecated(reason: "use search api") canDisplay: Boolean! @goField(forceResolver: true) createdByID: ID! createdBy: User! @goField(forceResolver: true) # promotion promotions: [PromotionCampaign!] @goField(forceResolver: true) @deprecated(reason: "use promotions in campaigns") campaigns: [Campaign!] @goField(forceResolver: true) } type UomQuery { list(ids: [ID!]): [Uom] @goField(forceResolver: true) get(id: ID!): Uom @goField(forceResolver: true) } type ProductGroupQuery { get(id: ID!): ProductGroup @goField(forceResolver: true) pagination(filters : ProductGroupFilters , pagination: PaginationRequest= {limit: 10, offset: 0}): ProductGroupResponse @goField(forceResolver: true) } type ProductOps { # deprecated: use setPrices instead setVat(id: ID!, vat: Boolean, vatPercent: Int32 @binding(constraint: "gte=-1,lte=100")): Product @goField(forceResolver: true) # id here is productID setPrices( id: ID!, prices: ProductPriceInput, vat: Boolean, vatPercent: Int32 @binding(constraint: "gte=-1,lte=100"), vatValue: Int64 @binding(constraint: "min=-1"), productDiscounts: [ProductDiscountInput!] , note : String, sellingStatus: SellingStatus, vatType: VatType = OPTIONAL, minOrderQuantity: Int64 @binding(constraint: "gte=1") ): Product @goField(forceResolver: true) updateStatus(ids: [ID!], isActive: Boolean, sellingStatus: SellingStatus): [Product]! @goField(forceResolver: true) importProductPrices(file: Upload!): PriceImportSession! @goField(forceResolver: true) createByExcel(file: Upload!, productType: ProductType!): BatchCreateProductResponse! @goField(forceResolver: true) # ProductType = Digital Product [ACCOUNT, KEY_LICENSE] } type ProductGroupOps { create(req: ProductGroupInput!): ProductGroup @goField(forceResolver: true) update(id: ID!, req: ProductGroupInput!): ProductGroup @goField(forceResolver: true) } input ProductFilterTypeInput { query: String parentCategoryIDs: [ID!] categoryIDs: [ID!] brandIDs: [ID!] regionStockIDs: [ID!] promotionCampaignTierTypes: [PromotionCampaignTierType!] priceRange: RangeFilter attributeValueIDs: [ID!] isEnoughStock: Boolean isActiveCategories: Boolean stockCityIDs: [ID!] } type SellerProductFilter { categories: [CategoryFilterResponse!] brands: [BrandFilterResponse!] attributes: [AttributeFilterResponse!] regions: [RegionStockFilterResponse!] promotionCampaignTiers: [PromotionCampaignTierFilterResponse!] cities: [StockCityFilterResponse!] } type CategoryFilterResponse { category: Category totalProduct: Int64! } type BrandFilterResponse { brand: Brand totalProduct: Int64! } type AttributeFilterResponse { attribute: Attribute value: [AttributeValueFilterResponse] } type AttributeValueFilterResponse { attributeValue: AttributeValue totalProduct: Int64! } type RegionStockFilterResponse { region: Region totalProduct: Int64! } type StockCityFilterResponse { city: City totalProduct: Int64! } type PromotionCampaignTierFilterResponse { promotionCampaignTierType: PromotionCampaignTierType totalProduct: Int64! } enum WeightUnit { GRAM KILOGRAM QUINTAL TON } enum DimensionUnit { MILLIMETRE CENTIMETRE METRE } enum VatType { REQUIRED NOT_REQUIRED OPTIONAL } enum ProductCollectionType { RECENT_DISCOUNT NEW_ARRIVAL BEST_SELLER POPULAR_FOR_YOU RECOMMENDED_FOR_YOU PROMOTION_CAMPAIGN AUCTION_CAMPAIGN } type Dimension { length : Float! width: Float! height: Float! unit : DimensionUnit! } type Weight { weight : Float! unit : WeightUnit! } input DimensionInput { length : Float! width: Float! height: Float! unit : DimensionUnit! } input WeightInput { weight : Float! unit : WeightUnit! } input ProductGroupInput { name: String! imageURLs: [String!] code: String! description: String brandID: ID! categoryID: ID! uomID: ID! minStockQuantity: Int64 productPrices: ProductGroupPriceInput vat: Boolean! @deprecated vatType: VatType = OPTIONAL vatPercent: Int64 = 0 vatValue: Int64 = 0 warranty: Int64 warrantyUnit: DatePeriodUnit attributeValues: [ProductGroupAttributeValueInput] products: [ProductInput] hasVariant: Boolean! dimension: DimensionInput weight: WeightInput copyrightTerm:Int64 copyrightUnit: CopyrightUnit productType: ProductType } type ProductGroupResponse { products: [ProductGroup!] paginationData: PaginationData! } input ProductInput { id: ID name: String! code: String! inStock: Int32! vat: Boolean! vatType: VatType = OPTIONAL vatPercent: Int64! vatValue: Int64 = 0 warranty: Int64 warrantyUnit: DatePeriodUnit productPrices: ProductPriceInput attributeValues: [ID!] imageURL: String isActive: Boolean! productType : ProductType = MATERIAL copyrightTerm: Int64 copyrightUnit: CopyrightUnit } input ProductGroupAttributeValueInput { attributeID: ID! attributeValueIDs: [ID!] isVariant: Boolean! value: String } input ProductPriceInput { level1Price: Int64! level2Price: Int64! level3Price: Int64! level4Price: Int64! } input ProductGroupPriceInput { importPrice: Int64! = 0 level1Price: Int64! = 0 level2Price: Int64! = 0 level3Price: Int64! = 0 level4Price: Int64! = 0 } type ProductPrices { # id: ID! id is hidden, client don't need to know ProductPrices.ID productID: ID! product: Product! level1Price: Int64! level2Price: Int64! level3Price: Int64! level4Price: Int64! } type ProductGroupPrices { productGroupID : ID! productGroup : ProductGroup! importPrice: Int64! level1Price: Int64! level2Price: Int64! level3Price: Int64! level4Price: Int64! } type ProductStock { productID: ID! product: Product! @goField(forceResolver: true) warehouseID: Int64! warehouse: Warehouse! @goField(forceResolver: true) quantity: Float! quantityRealStock : Int64! quantityRealStockHasVat : Int64! } type SupplierStock { productID: ID! product: Product! @goField(forceResolver: true) regionID: ID! region: Region @goField(forceResolver: true) totalQuantity: Float! vatQuantity: Float! } type ProductsResponse { products: [Product!] paginationData: PaginationData! attributes(attributeType: AttributeType): [Attribute!] @goField(forceResolver: true) } type Product { id: ID! productGroupID: ID name: String! code: String! inStock: Int32! manufactureID: ID @goField(forceResolver: true) manufacturer: Manufacturer @goField(forceResolver: true) vat: Boolean! @deprecated vatType: VatType! vatPercent: Int32! vatValue: Int64! warranty: Int64 warrantyUnit: DatePeriodUnit productPrices: ProductPrices @goField(forceResolver: true) priceOfSeller(sellerID: ID): PriceLevel @goField(forceResolver: true) stocks(warehouseIDs: [ID!]): [ProductStock] @goField(forceResolver: true) stockByWarehouse(warehouseID: ID!): ProductStock @goField(forceResolver: true) stocksSupplier: [SupplierStock] @goField(forceResolver: true) category: Category @goField(forceResolver: true) categoryID: ID uom: Uom @goField(forceResolver: true) updatedAt: Timestamp! group: ProductGroup @goField(forceResolver: true) variantAttributeValues: [VariantAttributeValue] @goField(forceResolver: true) # only attribute assigned directly to product flatAttributeValues: [FlatAttributeValue]! @goField(forceResolver: true) # flat attribute values fullAttributeValues: [ProductAttributeValue] @goField(forceResolver: true) # include attributes assign directly and attributes assigned to product group imageURL: String isActive: Boolean! productType : ProductType! totalInCart(cartID: ID!): Int64! @sellerSecured isSellable: Boolean! @goField(forceResolver: true) note: String canSellWithoutStock: Boolean! @goField(forceResolver: true) currentPriceBidSession: [PriceBidSession] @goField(forceResolver: true) conditionPromotionProductsOnGoing: [ConditionPromotionProduct] @goField(forceResolver: true) canPreOrder: Boolean! productDiscounts(quantity: Int64! = 0): [ProductDiscount!] @goField(forceResolver: true) copyrightTerm: Int64 copyrightUnit: CopyrightUnit lastPriceLog: PriceLog @goField(forceResolver: true) # giá được giảm trong 1 ngày sellingStatus: SellingStatus! stockByUser: StockByUser! @goField(forceResolver: true) minOrderQuantity: Int64! } type PriceImportSession { id: ID! priceLogs( # order_by: no order_by here, for now pagination: PaginationRequest!={offset: 0, limit: 10} ): [PriceLog!] @goField(forceResolver: true) fileName: String! fileURL: String! errorFileURL: String # this should be non-null only when status==FAILED status: PriceImportSessionStatus! errorReason: String! createdByID: ID! createdBy: User @goField(forceResolver: true) createdAt : Timestamp! # updatedAt : Timestamp! } type SellerProduct { id: ID! sellerID: ID! seller: Seller @goField(forceResolver: true) name: String! code: String! vat: Boolean! @deprecated vatType: VatType! vatPercent: Int32! vatValue: Int64! stockStatus: StockStatus! @goField(forceResolver: true) brandID: ID brand: Brand @goField(forceResolver: true) warranty: Int64 warrantyUnit: DatePeriodUnit copyrightTerm: Int64 copyrightUnit: CopyrightUnit price: Int64 @goField(forceResolver: true) priceDrop: ProductPriceDrop @goField(forceResolver: true) groupID: ID categoryID: ID category: Category @goField(forceResolver: true) uomID: ID uom: Uom @goField(forceResolver: true) thumbnail: String imageURLs: [String!] @goField(forceResolver: true) isActive: Boolean! # product - thông số kỹ thuật flatAttributeValues: [FlatAttributeValue] @goField(forceResolver: true) # product variant - biến thể variantAttributeValues: [VariantAttributeValue] @goField (forceResolver: true) groupVariantAttributeValues: [VariantAttributeValueGroup] @goField (forceResolver: true) inStock: Int64! @goField(forceResolver: true) productType: ProductType! inCartQuantity: Int64! @goField(forceResolver: true) isSellable: Boolean! @goField(forceResolver: true) canSellWithoutStock: Boolean! @goField(forceResolver: true) description: String @goField(forceResolver: true) currentPriceBidSession: PriceBidSession @goField(forceResolver: true) promotionProducts(onGoing: Boolean! = true): [ConditionPromotionProduct!] @goField(forceResolver: true) canPreOrder: Boolean! productDiscounts(quantity: Int64! = 0): [SellerProductDiscount!] @goField(forceResolver: true) collectionID: ID stockByRegion: StockByRegion! @goField(forceResolver: true) @deprecated(reason: "use stockByAddress") stockByUser: StockByUser! @goField(forceResolver: true) sellingStatus: SellingStatus! priceOfProduct(applyProductDiscount: Boolean!= false, upComing: Boolean! = false): PriceOfProduct! @goField(forceResolver: true) minOrderQuantity: Int64! message: Message @goField(forceResolver: true) } type VariantAttributeValueGroup { attributeID: ID! attribute: Attribute @goField(forceResolver: true) attributeValues: [AttributeValue] } type FlatAttributeValue { attributeName: String! attributeID: ID! # join attribute values or only free text attributeValue: String! attributeValueIDs: [ID!]! } type ProductAttributeValue { attributeID: ID! attribute: Attribute! attributeValues: [AttributeValue] # predefined values value: String # freetext value } type VariantAttributeValue { attributeID: ID! attribute: Attribute! attributeValue: AttributeValue! # predefined values } type ProductAttributeValueInput { attributeID: ID! attributeValueID: ID! } type ProductGroup { id: ID! brandID: ID categoryID: ID defaultProductID: ID createdAt : Timestamp! updatedAt: Timestamp! name: String! code: String! @goField(forceResolver: true) description: String! imageURLs: [String!] brand: Manufacturer! @goField(forceResolver: true) category: Category! @goField(forceResolver: true) uom: Uom @goField(forceResolver: true) minStockQuantity: Int64 productPrices: ProductGroupPrices @goField(forceResolver: true) vat: Boolean! @deprecated vatPercent: Int32 @deprecated warranty: Int64! warrantyUnit: DatePeriodUnit totalVariation: Int64! @goField(forceResolver: true) defaultProduct: Product @goField(forceResolver: true) attributeValues: [ProductGroupAttributeValue] @goField(forceResolver: true) products: [Product] @goField(forceResolver: true) variantAttributeValues: [VariantAttributeValueGroup] @goField (forceResolver: true) uomID: ID! hasVariant: Boolean! dimension: Dimension! weight: Weight! copyrightTerm:Int64 copyrightUnit: CopyrightUnit } type WarrantyValue { isWarranty: Boolean warrantyTime : Int64! } type ProductGroupAttributeValue { attributeID: ID! attribute: Attribute! @goField(forceResolver: true) attributeValues: [AttributeValue] @goField(forceResolver: true) isVariant: Boolean! value: String } type PriceLevel { level: Int64! price: Int64! vatType: VatType defaultExportVat: Boolean priceNoVat: Int64 priceHasVat: Int64 } type Uom { id: ID! name: String! code: String! operator: String! rate: Float! } input SaleCategoryInput { categoryID: ID! level: Int64! } type SaleCategory { categoryID: ID! level: Int64! checked: Boolean! category: Category! @goField(forceResolver: true) } input RangeFilter { from: Int64 to: Int64 } input PriceFilter { isSpecified: Boolean range: RangeFilter } input RealStockFilter { warehouseID: ID! range: RangeFilter! } input SupplierStocksFilter { regionID: ID rangeRealStock: RangeFilter rangeRealStockVAT: RangeFilter } input ProductsFilters { ids: [ID!] warehouseID: ID query: String # full text search manufacturerIDs: [ID!] categoryIDs: [ID!] priceLevel1: PriceFilter priceLevel2: PriceFilter priceLevel3: PriceFilter priceLevel4: PriceFilter realStocks: [RealStockFilter!] realStockHasVat: RangeFilter vat: Boolean @deprecated vatTypes: [VatType!] vatPercent: RangeFilter vatValue: RangeFilter attributes: AttributesFilter attributeValues: [AttributeValuesFilter] warranty: RangeFilter productType : ProductType pricePolicyType : PricePolicyType isActive: Boolean # get example file excel isExample: Boolean belongsToPromotionCampaignTypes: [PromotionCampaignType!] featureType: ProductFeatureType sellingStatuses: [SellingStatus!] supplierStocks: [SupplierStocksFilter!] } enum PricePolicyType { # Chính sách giá QUANTITY_DISCOUNT # Giảm giá theo số lượng NO_QUANTITY_DISCOUNT # Không có giảm giá theo số lượng } enum SearchOptionProductStock { NOT_SPECIFIED AVAILABLE OUT_OF_STOCK } enum SearchOptionOrderBy { AUTO #order the serp by automatically (in an intelligent way) PRICE_ASC PRICE_DESC NEW } enum ProductType { MATERIAL SERVICE VOUCHER KEY_LICENSE ACCOUNT } enum ProductFeatureType{ PRICE_DROP } type ProductPriceDrop { productID: ID! price: Int64! prePrice: Int64! } input SearchParam { query: String! = "" brandIDs: [ID!] categoryIDs: [ID!] stockStatus: SearchOptionProductStock! = NOT_SPECIFIED # deprecated: use regionStockIDs instead priceRange: RangeFilter attributeValueIDs: [ID!] orderBy: SearchOptionOrderBy! = AUTO productType : ProductType = MATERIAL # promotion promotionID : ID @deprecated(reason: "use campaign") # campaign campaignID: ID featureType: ProductFeatureType productIDs: [ID!] regionStockIDs: [ID!] stockCityIDs: [ID!] promotionCampaignTierTypes: [PromotionCampaignTierType!] productCollectionIDs: [ID!] } type SearchItem { product: SellerProduct! } type SearchResponse { items: [SearchItem!] paginationData: PaginationData! } input ProductGroupFilters { query : String } type PriceLog { #id: ID! hidden, client don't need to know about this productID: ID! product: Product! @goField(forceResolver: true) oldLevel1Price: Int64! newLevel1Price: Int64! oldLevel2Price: Int64! newLevel2Price: Int64! oldLevel3Price: Int64! newLevel3Price: Int64! oldLevel4Price: Int64! newLevel4Price: Int64! oldVat: Boolean! newVat:Boolean! oldVatType: VatType! newVatType: VatType! oldVatPercent: Int64! newVatPercent: Int64! oldVatValue: Int64! newVatValue: Int64! createdByID: ID! createdBy: User @goField(forceResolver: true) priceImportSessionID: ID priceImportSession: PriceImportSession @goField(forceResolver: true) createdAt: Timestamp! # updatedAt: Timestamp! oldLevel1Quantity: Int64 oldLevel1Discount: Int64 oldLevel2Quantity: Int64 oldLevel2Discount: Int64 oldLevel3Quantity: Int64 oldLevel3Discount: Int64 oldLevel4Quantity: Int64 oldLevel4Discount: Int64 newLevel1Quantity: Int64 newLevel1Discount: Int64 newLevel2Quantity: Int64 newLevel2Discount: Int64 newLevel3Quantity: Int64 newLevel3Discount: Int64 newLevel4Quantity: Int64 newLevel4Discount: Int64 } enum PriceImportSessionStatus { SUCCEED FAILED } enum PriceLogOrderBy { CREATED_AT_DESC CREATED_AT_ASC } type GetImportProductPricesFileResponse { fileURL: String! } type ProductDiscount { productID: ID! minQuantity: Int64! maxQuantity: Int64 discountAmount: Int64! isSelected: Boolean! } type SellerProductDiscount { productID: ID! minQuantity: Int64! maxQuantity: Int64 discountAmount: Int64! isSelected: Boolean! priceAfterDiscount: Int64! totalDiscountMoney: Int64! canApplyWithPromotionID: ID canApplyWithPromotion: PromotionCampaign @goField(forceResolver: true) } input ProductDiscountInput { minQuantity: Int64! discountAmount: Int64! } type CheckDuplicatedProductResponse { result: Boolean! product: Product respErr: String } type BatchCreateProductResponse { status: Boolean! errorType: BatchCreateError! errorMessage: String file: FileType } type StockByRegion { selectedRegionStockStatus: RegionStockStatus! regionStocks: [RegionStock!] overrideSupplierRegion: Boolean! cartNote: String createOrderStockWarning: CreateOrderStockWarning! } enum CreateOrderStockWarning { "NULL" NOT_SPECIFIED "Kho [region] không đủ số lượng bạn đặt. Cần đợi HA chuyển hàng vào." INTERNAL_REGION_INSUFFICIENT_STOCK "Kho [region] không còn đủ số lượng bạn đặt. Cần đợi load thêm hàng từ NCC." SUPPLIER_REGION_INSUFFICIENT_STOCK "Tổng kho HA không còn đủ số lượng bạn đặt. Cần đợi load thêm hàng từ NCC." TOTAL_UNSPECIFIC_AVAILABLE_STOCK "Tổng kho HA còn [số lượng] sp. Cần đợi load thêm hàng từ NCC." TOTAL_SPECIFIC_AVAILABLE_STOCK } enum ProductStockWarningCode { """ NULL """ NOT_SPECIFIED """ Cần đợi HA gom hàng giữa các kho để vận chuyển tới bạn. """ WAIT_INTERNAL_TRANSFER_BTW_WAREHOUSES """ HA không đủ số lượng tại khu vực của bạn. Cần đợi load thêm hàng từ NCC. """ INSUFFICIENT_WAREHOUSE_NEED_SUPPLIER """ Tổng kho HA không còn đủ số lượng bạn đặt. Cần đợi load thêm hàng từ NCC. """ TOTAL_UNSPECIFIC_AVAILABLE_STOCK """ Tổng kho HA còn [số lượng] sp. Cần đợi load thêm hàng từ NCC. """ TOTAL_SPECIFIC_AVAILABLE_STOCK """ Kho [tỉnh/thành] không đủ số lượng bạn đặt. Cần đợi HA chuyển hàng vào. """ INSUFFICIENT_WAREHOUSE_NEED_TRANSFER """ Cần đợi load thêm hàng từ NCC. """ WAIT_LOAD_SUPPLIER """ Cần đợi HA chuyển hàng vào. """ WAIT_INTERNAL_TRANSFER } enum MinOrderQuantityWarningCode { """ Chưa đạt số lượng đặt hàng tối thiểu. """ NOT_MEET_MIN_ORDER_QUANTITY } enum RegionStockStatus { "Sẵn kho HA cung cấp" FULL "Cần luân chuyển từ kho khác về" TRANSFER "Cần load hàng từ ncc" LOAD "Hết hàng" OUT_OF_STOCK "Sẵn kho Nhà cung cấp" SUPPLIER_READY_STOCK } type RegionStock { stockQuantity: Int64! regionID: ID! region: Region @goField(forceResolver: true) isSelected: Boolean! isSupplierStock: Boolean! } enum SellingStatus { AVAILABLE CONTACT UNAVAILABLE } type PriceOfProduct { productID: ID! product: SellerProduct! @goField(forceResolver: true) """ Gia cuoi cung """ price: Int64! originalPrice: Int64! appliedDiscountProductTier: PromotionCampaignTier # Hiện tại trả về CTKM 1 sản phẩm upComingPromotionNotify: String currentComboCartItem: ComboCartItem @goField(forceResolver: true) } type StockByUser { ProductID: ID! product: SellerProduct! @goField(forceResolver: true) stockStatus: ProductStockStatus! userStocks: [UserStock!] hasInternalStock: Boolean! } type UserStock { stockQuantity: Int64! code: String! cityName: String! isSelected: Boolean! isSupplierStock: Boolean! } enum ProductStockStatus { """ Sẵn kho HA cung cấp """ FULL """ Cần luân chuyển từ kho khác về """ TRANSFER """ Cần load hàng từ ncc """ LOAD """ Hết hàng """ OUT_OF_STOCK """ Sẵn kho Nhà cung cấp """ SUPPLIER_READY_STOCK }type PromotionCampaignQuery { pagination(filters: PromotionCampaignFilters, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[PromotionSort!]): PromotionCampaignsResponse @goField(forceResolver: true) get(id: ID!): PromotionCampaign @goField(forceResolver: true) sellerRankingList(promotionCampaignID: ID!, filters: PromotionSellerFilter, sort: PromotionSellerSort, pagination: PaginationRequest! = {limit: 10, offset: 0}): SellerRankResponse @goField(forceResolver: true) count(filters : PromotionCampaignFilters): Int64! @goField(forceResolver: true) orderRankingList(promotionCampaignID : ID! , filters: OrderPromotionFilter ,pagination: PaginationRequest! = {limit: 10, offset: 0} , sort: [OrderRankingSort] ): OrderRankingResponse @goField(forceResolver: true) getConditionPromotionProducts(filters: GetConditionProductFilter): [ConditionPromotionProduct!] @goField(forceResolver: true) getComboDetail(request: ComboInput): ActualCombo! @goField(forceResolver: true) getConditionPromotionProductByGroupID(groupID: ID!, otherComboItems: [ComboItemInput], comboQuantity: Int64): [ConditionPromotionProduct!]! @goField(forceResolver: true) getVouchers(filter: VoucherFilter, pagination: PaginationRequest! = {limit: 10, offset: 0}, sort :[PromotionSort!]): VoucherResponse @goField(forceResolver: true) getSellerUserSegments(filters: SegmentUserFilters, pagination: PaginationRequest! = {limit: 10, offset: 0}): SellerUserSegmentResponse @goField(forceResolver: true) encryptVoucherCodes(voucherCodes: [String!]!): [EncryptedVoucherCode!]! @goField(forceResolver: true) } type SaleChannelQuery{ listSalesChannel(filters: SaleChannelFilters): [SaleChannel] @goField(forceResolver: true) } type PromotionCampaignOps { create(promotionCampaignInput: PromotionCampaignInput): PromotionResponse! @goField(forceResolver: true) update(id: ID!, promotionCampaignInput: PromotionCampaignInput): PromotionResponse! @goField(forceResolver: true) changeActiveStatus(promotionID: ID!, isActive: Boolean!): ChangeActiveStatusResponse! @goField(forceResolver: true) remindMe(promotionID : ID!): Boolean @goField(forceResolver: true) @sellerSecured } type PromotionsWithDuplicateProducts { promotionCampaignID: ID! promotionCampaign: PromotionCampaign! @goField (forceResolver: true) overlappingProductIDs : [Int64!] overlappingProducts : [Product!] @goField (forceResolver: true) } input ComboInput { comboQuantity: Int64! promotionTierID: ID! items: [ComboItemInput]! giftItems: [ComboItemInput!] } input ComboItemInput { conditionProductGroupID: ID! productID: ID! quantity: Int64! isMain: Boolean! # expand for get stock status price: Int64 } input GetConditionProductFilter { productIDs: [ID!] promotionIDs: [ID!] productGroupIDs: [ID!] withoutPromotionIDs: [ID!] isActive: Boolean = true # belong to promotion campaign timeRange: TimeRangeFilter onGoing: Boolean isActiveProduct: Boolean needSelectedCombo: Boolean types: [PromotionProductType!] promotionTypes: [PromotionCampaignType!] tierIDs: [ID!] sellerID: ID promotionStatuses: PromotionCampaignStatus upComing: Boolean } type ChangeActiveStatusResponse { result : Boolean! listPromotionDuplicateProducts: [PromotionsWithDuplicateProducts!] } type PromotionResponse { errorMessage: String duplicatedPromotionProducts: [ConditionPromotionProduct!] promotionID: ID errorCombos: [ErrorCombo!] } type ErrorCombo { indexErrorTierGroup: Int64 indexErrorCombos: [Int64!] } input PromotionCampaignInput { name: String! campaignType: PromotionCampaignType! startDate: Timestamp! endDate: Timestamp! banner: BannerInput highlight: String description: String link: String linkType: LinkType! = PROMOTION_DETAIL applyWithOtherPromoTypes: [PromotionCampaignType!] saleChannelIDs: [ID!] promotionCampaignTierGroups: [PromotionCampaignTierGroupInput!] } # Extend for TOP_SALES extend input PromotionCampaignInput { maxOrderCompletedDate: Timestamp minTotalOrderValue: Int64 categoryConditionType: CampaignConditionType = INCLUDE brandConditionType: CampaignConditionType = INCLUDE categoriesIDs: [ID!] brandIDs: [ID!] } input PromotionCampaignFilters { query: String timeRange: TimeRangeFilter statuses: [PromotionCampaignStatus!] types: [PromotionCampaignType!] saleChannelIDs: [ID!] categoryIDs: [ID!] brandIDs: [ID!] isActive: Boolean ids : [ID!] sellerIDs :[ID!] productIDs: [ID!] createdByIDs: [ID!] } input BannerInput { imageURL: String! mobileURL: String! link: String } enum PromotionCampaignStatus { UPCOMING ON_GOING RECONCILING ENDED } type PromotionCampaignsResponse { promotionCampaigns: [PromotionCampaign!] paginationData: PaginationData! } #seller related information extend type PromotionCampaign { currentSellerResult: PromotionSeller @goField(forceResolver: true) @sellerSecured } extend type PromotionCampaign { remindMe: Boolean @goField(forceResolver: true) } type PromotionCampaign { id: ID! status: PromotionCampaignStatus! name: String! campaignType: PromotionCampaignType! startDate: Timestamp! endDate: Timestamp! bannerID: ID banner: Banner @goField(forceResolver: true) highlight: String description: String link: String maxOrderCompletedDate: Timestamp minTotalOrderValue: Int64 categoryConditionType: CampaignConditionType brandConditionType: CampaignConditionType saleChannels: [SaleChannel!] @goField(forceResolver: true) appliedCategories: [Category] @goField(forceResolver: true) appliedBrands: [Brand] @goField(forceResolver: true) fullEvents: [FullOrderEvent] @goField(forceResolver: true) isActive: Boolean! createdAt: Timestamp! createdByID: ID! createdBy: User @goField(forceResolver: true) clonePromotionCampaignID: ID applyWithOtherPromoTypes: [PromotionCampaignType!] promotionCampaignTiers: [PromotionCampaignTier!] @goField (forceResolver: true) promotionCampaignTierGroups: [PromotionCampaignTierGroup!] @goField (forceResolver: true) # total budget totalBudget: Int64! @goField (forceResolver: true) totalFixedPriceProduct: Int64! @goField (forceResolver: true) totalGift: Int64! @goField (forceResolver: true) totalRemainingBudget: Int64! @goField (forceResolver: true) # product in promotion conditionPromotionProducts : [ConditionPromotionProduct!] @goField (forceResolver: true) } type PromotionCampaignTierGroup { id: ID! type: PromotionCampaignTierType! limitType: LimitType @goField (forceResolver: true) # for fixed price combo maxQuantityPerSeller: Int64 budgetProductQuantity : Int64 usedProductQuantity : Int64 promotionCampaignTiers: [PromotionCampaignTier!] @goField (forceResolver: true) } type SaleChannel { id: ID! name: String! type: SaleChannelType! } input SaleChannelFilters { query: String type: [SaleChannelType!] ids : [ID!] } enum SaleChannelType { WEB APP SELLER_WEB } enum CampaignConditionType { ALL INCLUDE EXCLUDE } enum PromotionCampaignType { TOP_SALES PRODUCT_PROMO COMBO_PROMO ORDER_PROMO } type SellerRankResponse { lastUpdatedDate: Timestamp! promotionSellers: [PromotionSeller] paginationData: PaginationData! } type PromotionSeller { index: Int64! sellerID: ID! seller: Seller @goField(forceResolver: true) amount: Int64! totalOrderCompleted: Int64! totalOrderCreated: Int64! } input PromotionSellerFilter { query: String sellerID : ID } input PromotionSellerSort { by: PromotionSellerSortBy = AMOUNT sortType: SortType! = DESC } input PromotionSort { by: PromotionSortBy = ID sortType: SortType! = DESC } enum PromotionSellerSortBy { AMOUNT TOTAL_ORDER_COMPLETED TOTAL_ORDER_CREATED } enum PromotionSortBy { ID STATUS PRODUCT_COLLECTION } type OrderRanking { id : ID! createdAt : Timestamp! orderID : ID! orderCode : String! total : Int64! status: OrderStatus! sellerName : String! saleChannel : String! } type OrderRankingResponse { lastUpdatedDate: Timestamp ordersRanking : [OrderRanking!] paginationData: PaginationData } input OrderPromotionFilter { query: String status : [OrderStatus] sellerIDs : [ID!] saleChannelIDs : [ID!] timeRange : TimeRangeFilter } input OrderRankingSort { by: OrderRankingSortBy = CREATED_AT sortType: SortType! = DESC } enum OrderRankingSortBy { CREATED_AT AMOUNT } enum PromotionCampaignTierType { DISCOUNT_MONEY FIXED_PRICE GIFT DISCOUNT_PRODUCT DISCOUNT_ORDER } extend enum PromotionCampaignTierType { DISCOUNT_BASED_QUANTITY } enum DiscountType { DISCOUNT_MONEY DISCOUNT_PERCENTAGE } enum LimitType { LIMITED UNLIMITED } enum ApplyOnTypeEnum { APPLY_FOR_ORDER } type PromotionCampaignTier { id: ID! name: String! promotionCampaignID: ID! promotionCampaign: PromotionCampaign! @goField (forceResolver: true) type: PromotionCampaignTierType! minQuantity: Int64! quantity: Int64 @goField (forceResolver: true) # for fixedPrice combo limitType: LimitType @goField (forceResolver: true) # for discount money combo maxQuantityPerSeller: Int64 discountType: DiscountType discountAmount: Int64 budgetAmount: Int64 #số tiền ngân sách của khuyến mãi usedAmount: Int64 # số tiền ngân sách đã sử dụng của chương trình khuyến mãi fixedComboPrice: Int64 # giá bán của combo giá cố định theo mức availableBudgetAmount: Int64 @goField(forceResolver: true) conditionProductGroups: [ConditionPromotionProductGroup!] @goField (forceResolver: true) # user for discount for product, for seller soldQuantityOfTier: SoldQuantityOfTier @goField(forceResolver: true) availableQuantity: Int64! @goField(forceResolver: true) # áp dụng cho seller # user for progress bar, apply with level1 price usedQuantity: Int64! @goField(forceResolver: true) totalQuantity: Int64! @goField(forceResolver: true) # use for discount order minAmount: Int64 maxDiscountAmount: Int64 applyOnType: ApplyOnTypeEnum hasVoucher: Boolean! sellerSegmentID: ID! sellerUserSegment: SellerUserSegment! @goField (forceResolver: true) } type ConditionPromotionProductGroup { id: ID! promotionCampaignTierID: ID! promotionCampaignTier: PromotionCampaignTier! @goField (forceResolver: true) quantity: Int64! type: PromotionProductType! conditionPromotionProducts: [ConditionPromotionProduct!] @goField (forceResolver: true) } type ConditionPromotionProduct{ productID: ID! product: Product! @goField (forceResolver: true) sellerProduct: SellerProduct @goField(forceResolver: true) stockStatus: StockStatus conditionPromotionProductGroupID: ID! conditionPromotionProductGroup: ConditionPromotionProductGroup! @goField (forceResolver: true) promotionCampaignTierID: ID! promotionCampaignTier: PromotionCampaignTier! @goField (forceResolver: true) promotionCampaignID: ID! promotionCampaign: PromotionCampaign! @goField (forceResolver: true) type: PromotionProductType! budgetQuantity: Int64 productWarranty: Int64 selectedCombo: ActualCombo } input PromotionCampaignTierGroupInput { type: PromotionCampaignTierType! maxQuantityPerSeller: Int64 budgetProductQuantity : Int64 limitType: LimitType promotionCampaignTiers : [PromotionCampaignTierInput!] } input PromotionCampaignTierInput { type: PromotionCampaignTierType! minQuantity: Int64 maxQuantityPerSeller: Int64 discountType: DiscountType limitType: LimitType # money benefit discountAmount: Int64 budgetAmount: Int64 #số tiền ngân sách của khuyến mãi fixedComboPrice: Int64 # giá bán của combo giá cố định theo mức # conditions conditionProductGroups: [ConditionPromotionProductGroupInput!] minAmount: Int64 maxDiscountAmount: Int64 applyOnType: ApplyOnTypeEnum hasVoucher: Boolean! = false sellerSegmentID: ID sellerIDs: [ID!] # if sellerSegmentID is null use sellerIDs to create new custom seller segment with type = in_group voucherGroups :[VoucherGroupInput!] } enum PromotionProductType { GIFT_PRODUCT CONDITION_PRODUCT } input ConditionPromotionProductGroupInput { quantity: Int64! conditionPromotionProducts: [ConditionPromotionProductInput!] type: PromotionProductType! = CONDITION_PRODUCT } input ConditionPromotionProductInput{ productID: ID! type: PromotionProductType! = CONDITION_PRODUCT budgetQuantity: Int64 productWarranty: Int64 } type ActualCombo { mainItem: ComboItem! # List product in combo comboItems: [ComboItem!] giftItems: [ComboItem!] # Price of combo promotionPrice: Int64! # discount money total discountAmount: Int64! discountType: DiscountType! } type ComboItem { productID: ID! product: SellerProduct @goField (forceResolver: true) productGroupID: ID! conditionPromotionProductGroup: ConditionPromotionProductGroup @goField (forceResolver: true) quantity: Int64! } type SoldQuantityOfTier { tierID: ID! soldQuantity: Int64! # for each seller totalQuantity: Int64! # for budget } type SellerPromotionTier { sellerID: ID! tierID: ID! groupTierID: ID usedQuantity: Int64! } enum LinkType { LANDING_PAGE PROMOTION_DETAIL PROMOTION_PRODUCT } enum SellerUserSegmentEnum { ALL NEW_SELLER NOT_LOGGED_IN NO_ORDER IN_GROUP HAVE_VOUCHER_CODE } enum TimeUnit { DAY WEEK MONTH YEAR IN_PROMOTION NO_LIMIT } type VoucherGroup { id: ID! promotionCampaignID: ID! promotionCampaignTierID: ID! limitTimeUnit: TimeUnit! limitTime: Int64! # time active voucher code } enum VoucherStatus { UPCOMING ONGOING EXPIRED OUT_OF_USAGE DISABLE } type Voucher { id: ID! code: String! promotionCampaignID: ID! promotionCampaign: PromotionCampaign! @goField (forceResolver: true) promotionCampaignTierID: ID! promotionCampaignTier: PromotionCampaignTier! @goField (forceResolver: true) voucherGroupID: ID! voucherGroup: VoucherGroup! @goField (forceResolver: true) status: VoucherStatus! usedQuantity: Int64! } input VoucherGroupInput { limitTimeUnit: TimeUnit! limitTime: Int64! # time active voucher code vouchers: [VoucherInput!]! sellerSegmentType: SellerUserSegmentEnum! = ALL } input VoucherInput { code: String! sellerSegmentType: SellerUserSegmentEnum! = ALL } input VoucherFilter { ids: [ID!] codes: [String!] statuses: [VoucherStatus!] usedQuantityRange: RangeFilter timeRange: TimeRangeFilter sellerIDs: [ID!] productIDs: [ID!] } type VoucherResponse { vouchers: [Voucher!] paginationData: PaginationData! } input SegmentUserFilters { ids: [ID!] types: [SellerUserSegmentEnum!] } type SellerUserSegmentResponse { sellerUserSegments: [SellerUserSegment!] paginationData: PaginationData! } enum SellerVoucherStatus { AVAILABLE EXPIRED OUT_OF_USAGE DISABLE } type SellerVoucher { sellerID: ID! seller: Seller! @goField (forceResolver: true) voucherID: ID! voucher: Voucher! @goField (forceResolver: true) """ Số lượng voucher đã sử dụng """ usedQuantity: Int64! """ Số lượng tối đa đại lý được sử dụng """ budgetQuantity: Int64 startDate: Timestamp! endDate: Timestamp! """ Số tiền giảm giá trên đơn hàng """ discountMoney: Int64! # discount money for order status: SellerVoucherStatus! isSelected: Boolean! """ Số tiền giảm giá tối đa """ maxDiscountAmount: Int64 warningMessage: Message """ Loại giảm giá """ discountType: DiscountType! """ Số tiền giảm giá/ giảm % """ discountAmount: Int64! """ Số tiền tối thiểu đơn hàng """ minAmount: Int64! """ Số tiền đã sử dụng """ usedAmount: Int64! """ Ngân sách tối đa """ maxBudgetAmount: Int64 code: String! sellerUserSegmentType: SellerUserSegmentEnum! } type EncryptedVoucherCode { voucherCode: String! encryptedVoucherCode: String! }type ProviderQuery { pagination(filters: ProviderFilters, , pagination: PaginationRequest! = {limit: 10, offset: 0}): ProviderResponse @goField(forceResolver: true) } type ProviderResponse { providers: [Provider!] paginationData: PaginationData! } input ProviderFilters { query : String } type Provider { id : ID name : String phone : String email: String address : String } type PurchaseOrderOps { create(purchaseOrder: CreatePurchaseOrderInput!): PurchaseOrder @goField(forceResolver: true) @staffSecured update(id: ID!, purchaseOrder: UpdatePurchaseOrderInput!, isResubmit: Boolean = false): Boolean @goField(forceResolver: true) @staffSecured confirmReceived(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmApprovedCheckInfo(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmImportedSerial(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmApprovedCheckQuality(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmSavedDocument(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmDeposit(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmPayment(ids: [ID!]): Boolean @goField(forceResolver: true) @staffSecured confirmCancel(ids: [ID!], reasonInput: RejectOrderPurchaseInput!): Boolean @goField(forceResolver: true) @staffSecured confirmRejectedCheckQuality(id: ID!, reasonInput: RejectOrderPurchaseInput!, items:[RejectPurchaseOrderItemInput!]): Boolean @goField(forceResolver: true) @staffSecured confirmRejectedCheckInfo(id: ID!, reasonInput: RejectOrderPurchaseInput!, items:[RejectPurchaseOrderItemInput!]): Boolean @goField(forceResolver: true) @staffSecured split(id: ID!, remainPurchaseOrder: SplitPurchaseOrderInput!, extraPurchaseOrder: SplitPurchaseOrderInput!): Boolean @goField(forceResolver: true) @staffSecured } type PurchaseOrderQuery { pagination(filters: PurchaseOrderFilters, pagination: PaginationRequest! = {limit: 10, offset: 0}, sorts: [PurchaseOrderSort!]): PurchaseOrderPaginationResponse @goField(forceResolver: true)@staffSecured get(id: ID!): PurchaseOrder @goField(forceResolver: true)@staffSecured statusCount: TotalByPurchaseOrderStatus @goField(forceResolver: true)@staffSecured references(id: ID!): [PurchaseOrderReference!] @goField(forceResolver: true)@staffSecured } input PurchaseOrderSort { by: PurchaseOrderSortBy! = CREATED_AT type: SortType! = DESC } enum PurchaseOrderSortBy { CREATED_AT } type TotalByPurchaseOrderStatus { all: Int64! waitingDeposit: Int64! waitingForReceiving: Int64! waitingForCheckingInfo: Int64! waitingForCheckingQuality: Int64! waitingForImportSerial: Int64! waitingForSaveDocument: Int64! waitingForImportStock: Int64! waitingForHandling: Int64! waitingForPayment: Int64! completed: Int64! canceled: Int64! } input PurchaseOrderFilters { query: String! = "" sellerIDs : [ID!] warehouseIDs: [ID!] types: [PurchaseOrderRequestType!] statuses: [PurchaseOrderStatus!] timeRange: TimeRangeFilter createdByIDs : [ID!] updatedByIDs : [ID!] } type PurchaseOrderPaginationResponse { purchaseOrders: [PurchaseOrder!] paginationData: PaginationData! } enum PurchaseOrderStatus { WAITING_FOR_DEPOSIT WAITING_FOR_RECEIVING WAITING_FOR_CHECKING_INFO WAITING_FOR_CHECKING_QUALITY WAITING_FOR_IMPORT_SERIAL WAITING_FOR_IMPORT_STOCK WAITING_SAVE_DOCUMENT WAITING_FOR_HANDLING WAITING_FOR_PAYMENT COMPLETED CANCELED } enum PurchaseOrderEvent { CREATED UPDATE_INFO CONFIRM_DEPOSIT CONFIRM_RECEIVED CONFIRM_APPROVED_CHECKING_INFO CONFIRM_REJECTED_CHECKING_INFO CONFIRM_APPROVED_CHECKING_QUALITY CONFIRM_REJECTED_CHECKING_QUALITY CONFIRM_IMPORTED_SERIAL CONFIRM_SAVED_DOCUMENT CONFIRM_HANDLED CONFIRM_PAYMENT CONFIRM_CANCELED CONFIRM_SPLITTED } enum PurchaseOrderRequestType { DOMESTIC OVERSEAS } enum PurchaseOrderOrderType { FULLY PARTIALLY } type PurchaseOrder { id: ID! code: String! status: PurchaseOrderStatus! requestType: PurchaseOrderRequestType! orderType: PurchaseOrderOrderType! parentID: ID parent: PurchaseOrder @goField(forceResolver: true) sellerID: ID! seller: Seller @goField(forceResolver: true) warehouseID: ID! warehouse: Warehouse @goField(forceResolver: true) paymentMethods : [ImportRequestPaymentMethod!] paymentTerms : [ImportRequestPaymentTerms!] transferNote: String paymentDepositAmount: Float! paymentOnDeliveryAmount: Float! paymentDebtAmount: Float! productQuantity: Int64! total: Float! subTotal: Float! totalVatAmount: Float! @goField(forceResolver: true) currency: Currency! @goField(forceResolver: true) fileURLs : [String!] internalNote : String createdByID : ID! createdBy : User! @goField(forceResolver: true) updatedByID : ID updatedBy : User @goField(forceResolver: true) createdAt : Timestamp updatedAt : Timestamp items: [PurchaseOrderItems!] @goField(forceResolver: true) deniedReason: DeniedReason @goField(forceResolver: true) fullEvents: [FullPurchaseOrderEvent] @goField(forceResolver: true) } union PurchaseOrderReference = ImportRequest | SerialImportNotes type DeniedReason{ id: ID! eventType: PurchaseOrderEvent! reason: String files: [String!] causes: [Cause!] createdByID: ID! createdBy: User! @goField(forceResolver: true) createdAt : Timestamp updatedAt : Timestamp } type PurchaseOrderItems { id : ID! purchaseOrderID : ID! purchaseOrder : PurchaseOrder @goField(forceResolver: true) productID : ID! product : Product @goField(forceResolver: true) quantity : Int64! receivedQuantity : Int64! notQualifiedQuantity : Int64! rejectedCauses: [String] afterDiscountPrice : Float! afterVatPrice : Float! currency : Currency! vatPercent : Int64! subTotal: Float! @goField(forceResolver: true) beforeVatPrice: Float! @goField(forceResolver: true) vatAmount: Float! @goField(forceResolver: true) warranty : Int64! warrantyPeriod : DatePeriodUnit! creditDays : Int64! expectedDeliveryTime : Timestamp! createdAt : Timestamp updatedAt : Timestamp } input CreatePurchaseOrderInput{ sellerID : ID! importWarehouseID : ID! requestType :PurchaseOrderRequestType! orderType :PurchaseOrderOrderType! paymentMethods : [ImportRequestPaymentMethod!] paymentTerms : [ImportRequestPaymentTerms!] transferNote: String paymentDepositAmount: Float! paymentOnDeliveryAmount: Float! paymentDebtAmount: Float! fileURLs : [String!] internalNote : String items : [CreatePurchaseOrderItemInput!]! refImportRequestID: ID } input CreatePurchaseOrderItemInput { productID : ID productGroupInput : ProductGroupInput quantity : Int64! afterDiscountPrice : Float! afterVatPrice : Float! vatPercent : Int64! currency : Currency! warranty : Int64! warrantyPeriod : DatePeriodUnit! creditDays : Int64! expectedDeliveryTime : Timestamp! } input UpdatePurchaseOrderInput{ sellerID : ID! importWarehouseID : ID! requestType :PurchaseOrderRequestType! orderType :PurchaseOrderOrderType! paymentMethods : [ImportRequestPaymentMethod!] paymentTerms : [ImportRequestPaymentTerms!] paymentNotes: String paymentDepositAmount: Float! paymentOnDeliveryAmount: Float! paymentDebtAmount: Float! fileURLs : [String!] internalNote : String newItems : [UpdatePurchaseOrderItemInput!] updateItems : [UpdatePurchaseOrderItemInput!] deletedIDs: [ID!] } input UpdatePurchaseOrderItemInput{ id : ID productID : ID! quantity : Int64! afterVatPrice : Float! afterDiscountPrice : Float! vatPercent : Int64! currency : Currency! warranty : Int64 warrantyPeriod : DatePeriodUnit creditDays : Int64 expectedDeliveryTime : Timestamp } input RejectOrderPurchaseInput{ reason: String fileURLs: [String!] causes: [Cause!] } input RejectPurchaseOrderItemInput{ purchaseOrderItemID: ID! receivedQuantity: Int64! notQualifiedQuantity: Int64! causes: [Cause!] } input SplitPurchaseOrderInput{ orderType :PurchaseOrderOrderType! paymentMethods : [ImportRequestPaymentMethod!] paymentTerms : [ImportRequestPaymentTerms!] transferNote: String paymentDepositAmount: Float! paymentOnDeliveryAmount: Float! paymentDebtAmount: Float! items : [SplitPurchaseOrderItemInput!]! } enum Cause { CAUSE_SUPPLIER_INFO_IS_INCORRECT CAUSE_WRONG_DELIVERED_PRODUCT CAUSE_WRONG_PRODUCT_QUANTITY CAUSE_DELIVERY_NOTE_AND_ORDER_INFO_DIFFERENT CAUSE_NOT_QUALIFIED_QUALITY } input SplitPurchaseOrderItemInput{ productID : ID! quantity : Int64! afterDiscountPrice : Float! afterVatPrice : Float! vatPercent : Int64! currency : Currency! warranty : Int64! warrantyPeriod : DatePeriodUnit! creditDays : Int64! expectedDeliveryTime : Timestamp! } type FullPurchaseOrderEvent { state: FullPurchaseOrderEventState! name: String! createdAt: Timestamp createdByID: ID createdBy: User @goField(forceResolver: true) } enum FullPurchaseOrderEventState { FUTURE CURRENT PAST } type PurchaseOrderObjectEvent { id: ID! purchaseOrderID: ID eventType: PurchaseOrderEvent! createdByID: ID createdBy: User @goField(forceResolver: true) note: String createdAt: Timestamp updatedAt: Timestamp }type RegionQuery { list(ids:[ID!]): [Region] @goField(forceResolver: true) } type Region { id: ID! name: String! code: String! isActive: Boolean! createdAt : Timestamp updatedAt : Timestamp } type ReportQuery{ getPotentialCustomerReport(filters: PotentialCustomerReportFilter! = {}): Report! @goField(forceResolver: true) getSalesReport(filter: ReportFilters): Report! @goField(forceResolver: true) getSalesManagerReport(filter: ReportFilters): Report! @goField(forceResolver: true) getCancelOrderReasonReport: Report! @goField(forceResolver: true) } type Report { dashboardID : String domainUrl : String token : String } input PotentialCustomerReportFilter { reportType: PotentialCustomerReportType! = PERSONAL timeRange: TimeRangeFilter! = {} } input ReportFilters{ timeRange: TimeRangeFilter } enum PotentialCustomerReportType { GENERAL PERSONAL } type SellerOps { # sellers create( sellerInfo: CreateSellerInfoRequest!, vatInfo: CreateVatInfoRequest, warehouseIDs: [ID!], saleCategories: [SaleCategoryInput!], bankAccounts: [BankAccountInput!], ): Seller! @goField(forceResolver: true) update( sellerID: ID!, sellerInfo: CreateSellerInfoRequest!, vatInfo: CreateVatInfoRequest, warehouseIDs: [ID!], saleCategories: [SaleCategoryInput!], bankAccounts: [BankAccountInput!], # update & delete ): Seller! @goField(forceResolver: true) updateIdentitySeller(sellerID: ID!, sellerRequest: IdentitySellerRequest!): Seller! @goField(forceResolver: true) updateStatus(id: ID!, isActive: Boolean, isActiveSupplier: Boolean, reason: DeactivateSellerReasonInput): Boolean! @goField(forceResolver: true) updateSellerSaleCategories(sellerID: ID!, saleCategories: [SaleCategoryInput!]): [SaleCategory!] @goField(forceResolver: true) updateSellerWarehouses(sellerID: ID!, warehouseIDs: [ID!]!): Boolean! @goField(forceResolver: true) inviteSeller(sellerID :[ID!]):Boolean! @goField(forceResolver: true) receive(sellerIDs: [ID!]): Boolean! @goField(forceResolver: true) @deprecated(reason: "No longer support") approve(sellerID: ID!, request: ApprovalInput!): Boolean! @goField(forceResolver: true) @deprecated(reason: "No longer support") reject(sellerIDs: [ID!], reason: RejectInput!): Boolean! @goField(forceResolver: true) @deprecated(reason: "No longer support") reprocess(sellerIDs: [ID!]): Boolean! @goField(forceResolver: true) @deprecated(reason: "No longer support") mergeSeller(sellerID: ID!, existedSellerID: ID!): Boolean! @goField(forceResolver: true) } type SellerQuery { get(id: ID!): Seller @goField(forceResolver: true) pagination(filters: SellersFilters, pagination: PaginationRequest): SellersResponse @goField(forceResolver: true) getActivityLogs(sellerID: ID!, filters: SellerActivityLogFilters, pagination: PaginationRequest): SellerActivityLogsResponse @goField(forceResolver: true) getTotalByStatus: TotalSellerByApprovalStatus @goField(forceResolver: true) @staffSecured @deprecated(reason: "No longer support") } type SellerGroupOps{ create(sellerGroupInfo: SellerGroupInput!): SellerGroup! @goField(forceResolver: true) update(id: ID!, sellerGroupInfo: SellerGroupInput!): SellerGroup! @goField(forceResolver: true) } type SellerGroupQuery{ get(id: ID!): SellerGroup @goField(forceResolver: true) pagination(filters: SellerGroupFilters, pagination: PaginationRequest = {limit: 10, offset: 0}): SellerGroupPaginationResponse @goField(forceResolver: true) } type SellerLevelQuery { list(ids:[ID!]): [SellerLevel] @goField(forceResolver: true) } type SellerGroupPaginationResponse { sellerGroups: [SellerGroup] paginationData: PaginationData! } input IdentitySellerRequest { note: String } input ApprovalInput { sellerInfo: CreateSellerInfoRequest!, vatInfo: CreateVatInfoRequest, warehouseIDs: [ID!], saleCategories: [SaleCategoryInput!], bankAccounts: [BankAccountInput!], } input SellerGroupFilters { ids: [ID!] query: String isActive: Boolean isSeller: Boolean isSupplier: Boolean } input SellerGroupInput { code: String! name: String! managerID: ID! description: String isActive: Boolean! } type SellerGroup { id: ID! code: String! name: String! managerID: ID! manager: User @goField(forceResolver: true) description: String sellerQuantity: Int64! @goField(forceResolver: true) isActive: Boolean! } enum SellerType { COMPANY PERSONAL } type SellerLevel { id:ID! name: String! level: Int64! } type TotalSellerByApprovalStatus { all: Int64! waitingApproval: Int64! processing: Int64! approval: Int64! rejected: Int64! } type VatInfo { id: ID! taxIDNumber: String! businessName: String representative: String telephone: String address: String email: String bankID: ID bank: Bank @goField(forceResolver: true) bankAccountNumber: String bankBranch: String defaultExportVat: Boolean allowEditVat: Boolean } type BankAccountInfo{ id: ID! bankID: ID! bank: Bank @goField(forceResolver: true) bankAccountNumber: String! name: String! bankBranch: String! } enum SellerFilterOrderBy{ ID_ASC ID_DESC SHORT_NAME_ASC SHORT_NAME_DESC } enum InviteStatus { USED INVITED UNINVITED } input SellersFilters { query: String sellerLevelID: ID sellerLevelIDs: [ID] orderBy: SellerFilterOrderBy ids: [ID] isActive: Boolean isActiveSupplier: Boolean inviteStatus : InviteStatus timeRange: TimeRangeFilter exportedWarehouseID: ID exportedWarehouseIDs: [ID] sellerGroupIDs: [ID] isSeller: Boolean isSupplier: Boolean approvalStatus: [SellerApprovalStatus!] types: [SellerType!] taxIDNumber: String idNumber: String serialID: ID } type SellersResponse { sellers: [Seller] paginationData: PaginationData! } input CreateVatInfoRequest{ taxIDNumber: String businessName: String representative: String telephone: String address: String email: String bankID: ID bankAccountNumber: String bankBranch: String defaultExportVat: Boolean! = true allowEditVat: Boolean! = false } input CreateSellerInfoRequest{ logoUrl: String type: SellerType! idNumber: String shortName: String debtLimit: Int64 debtAge: Int64 fullName: String! email: String telephone: String! address: String wardID: ID! districtID: ID! cityID: ID! paymentMethod: SellerPaymentMethod representName : String representEmail : String representPhone : String sellerGroupID: ID status: Boolean isSeller: Boolean = true isSupplier: Boolean = true note: String } type Seller { id: ID! code: String! logoUrl: String type: SellerType! idNumber: String! shortName: String! sellerLevelID: ID! sellerLevel: SellerLevel @goField(forceResolver: true) debtLimit: Int64 debtAge: Int32 vatInfoID: ID isActive: Boolean! isActiveSupplier: Boolean! vatInfo: VatInfo @goField(forceResolver: true) fullName: String! email: String telephone: String address: String wardID: ID districtID: ID cityID: ID ward: Ward @goField(forceResolver: true) district: District @goField(forceResolver: true) city: City @goField(forceResolver: true) warehouses: [Warehouse!] @goField(forceResolver: true) saleCategories: [SaleCategory!] @goField(forceResolver: true) fullSaleCategories: [SaleCategory!] @goField(forceResolver: true) activeWallets: [Wallet] @goField(forceResolver: true) paymentMethod: SellerPaymentMethod countInvite : Int64 isLoggedIn : Boolean representName : String representEmail : String representPhone : String sellerGroupID: ID bankAccounts: [BankAccountInfo!] @goField(forceResolver: true) sellerGroup: SellerGroup @goField(forceResolver: true) canUpdateProductPrice: Boolean! @goField(forceResolver: true) isSeller: Boolean isSupplier: Boolean approvalStatus: SellerApprovalStatus! rejectedReason: String note: String users: [User!] @goField(forceResolver: true) # login account info payableTotalBalance: Int64! payableAvailabilityBalance: Int64! personalIncomeTax: Int64! createdAt : Timestamp } enum SellerPaymentMethod { DEBT WALLET COD } # everything about money of seller extend type Seller { companyWalletID: ID companyWallet: Wallet @goField(forceResolver: true) debtWalletID: ID debtWallet: Wallet @goField(forceResolver: true) currentDebt: Int64! @goField(forceResolver: true) currentAvailable: Int64! @goField(forceResolver: true) #available balance = companyWallet.balance + debt limit availabilityLimit: Int64! @goField(forceResolver: true) } enum DeactivateSellerReasonEnum { OVERDUE_DEBT BAD_DEBT } input DeactivateSellerReasonInput { defaultReason: DeactivateSellerReasonEnum freeText: String } input SellerActivityLogFilters { updatedAt: Timestamp updatedAtTimeRange: TimeRangeFilter status: [Boolean!] # todo remove action: [SellerActionEnum!] updatedByID: ID # todo remove updatedByIDs: [ID!] orderBy: SellerActivityOrderBy types: [ActivityLogType!] } enum SellerActionEnum { ACTIVATE_ACCOUNT DEACTIVATE_ACCOUNT UPDATE_INFO } enum SellerActivityOrderBy{ UPDATED_AT_ASC UPDATED_AT_DESC } type SellerActivityLog { updatedAt: Timestamp! status: Boolean! action: SellerActionEnum! detail: String! updatedByID: ID! updatedBy: User @goField(forceResolver: true) } type SellerActivityLogsResponse { sellerActivityLogs: [SellerActivityLog] paginationData: PaginationData! } enum ActivityLogType { SELLER SUPPLIER } input RejectInput { defaultReason: RejectSellerReason freeText: String } enum RejectSellerReason { MISSING_INFO # Không cung cấp đủ thông tin NOT_ENOUGH_DEBT_LIMIT # Không đủ hạn mức công nợ } enum SellerApprovalStatus { WAITING_APPROVAL PROCESSING APPROVED REJECTED } type SellerUserSegment { id: ID! type: SellerUserSegmentEnum! name: String! description: String! sellers: [Seller!] @goField (forceResolver: true) } type SerialExportNoteQuery { pagination (filters: SerialExportNotesFilters!, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort:[SerialExportNoteSort!] = {by: ID , sortType: DESC} ) : SerialExportNoteResponse @goField(forceResolver: true) paginationSerial (filters: SerialExportNotesFilters!, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[SerialExportNoteSort!] ) : SerialExportResponse @goField(forceResolver: true) get(id: ID!):SerialExportNote @goField(forceResolver: true) count(filters: SerialExportNotesFilters!): Int64! @goField(forceResolver: true) } type SerialExportNoteOps { create(request: SerialExportNoteInput): SerialExportNote @goField(forceResolver: true) update(serialExportNoteID: ID! , request: SerialExportNoteInput!): Boolean! @goField(forceResolver: true) exportFile(serialExportNoteID: ID!, serialExportNoteItemIDs: [ID!], type: SerialNoteType!, fileType: ExportFileType!, serialType: SerialType): FileType! @goField(forceResolver: true) confirmCancel(serialExportNoteID: ID!) : Boolean @goField(forceResolver: true) sendEmail(serialExportNoteID: ID!, email: String!) : Boolean @goField(forceResolver: true) } input SerialExportNoteInput { type : SerialExportNoteType! providerID : ID sellerID : ID orderID : ID note : String fileURLs: [String!] items : [SerialExportNoteItemInput!]! } input SerialExportNoteItemInput { serialExportNoteItemID: ID productID: ID expectedQuantity: Int64 warrantyOnSale: Int64 warrantyUnit: DatePeriodUnit copyrightTerm: Int64 copyrightUnit: CopyrightUnit soldDate: Timestamp quantity: Int64 serialIDs: [ID!] warrantyItem: WarrantyItemInput } input SerialExportNotesFilters { branchesID: ID query: String # query by order code and seller name sellerIDs: [ID!] providerIDs: [ID!] exportWarehouseIDs: [ID!] createdByIDs: [ID!] type: [SerialExportNoteType!] serialExportNoteIDs: [ID!] serialTypes: [SerialType] timeRange: TimeRangeFilter orderID: ID orderIDs: [ID!] serialID: ID productIDs: [ID!] } input SerialExportNoteSort { by: SerialExportNoteSortBy = CREATED_AT sortType: SortType! = DESC } enum SerialExportNoteSortBy { ID CREATED_AT ORDER_PRICE } type SerialExportNoteResponse { SerialExportNotes: [SerialExportNote!] paginationData: PaginationData! } type SerialExportResponse { exportSerials: [SerialExportNoteItemMapping!] paginationData: PaginationData! } type SerialExportNote { id : ID! code : String type : SerialExportNoteType sellerID : ID seller : Seller @goField(forceResolver: true) providerID : ID provider : Seller @goField(forceResolver: true) orderID : ID order : Order @goField(forceResolver: true) createdByID : ID createdBy : User @goField(forceResolver: true) note : String fileURLs :[String!] quantityKindOfProduct : Int64 @goField(forceResolver: true) quantitySerial: Int64 @goField(forceResolver: true) items : [SerialExportNoteItem] @goField(forceResolver:true) createdAt : Timestamp updatedAt : Timestamp } enum SerialExportNoteType { """Đơn hàng""" ORDER """Bảo hành""" WARRANTY """Xuất trả nhà cung cấp""" RETURN_SUPPLIER """Luân chuyển serial giữa các kho""" TRANSFER_SERIAL """Khác""" OTHER } type SerialExportNoteItem { id : ID! serialExportNoteID : ID serialExportNote : SerialExportNote @goField(forceResolver: true) productID : ID product : Product @goField(forceResolver: true) quantity: Int64 @deprecated(reason: "Use expectedQuantity instead") expectedQuantity: Int64 warrantyOnSale : Int64 warrantyOnSaleUnit : DatePeriodUnit soldDate : Timestamp exportItems : [SerialExportNoteItemMapping!] @goField(forceResolver: true) createdAt : Timestamp updatedAt : Timestamp copyrightTerm :Int64 copyrightUnit : CopyrightUnit } type SerialExportNoteItemMapping { warrantyNoteID : ID warrantyNote : WarrantyNote @goField(forceResolver: true) serialExportNoteItemID : ID serialExportNoteItem :SerialExportNoteItem @goField(forceResolver: true) serialID : ID serial : Serial @goField(forceResolver: true) replaceSerialID : ID replaceSerial : Serial @goField(forceResolver: true) exportedWarehouseID : ID exportedWarehouse : Warehouse @goField(forceResolver: true) } type SerialQuery { pagination (filters: SerialFilters, pagination: PaginationRequest! = {limit: 10, offset: 0}, sorts :[SerialSort!]) : SerialsResponse @goField(forceResolver: true) get(id : ID!) : Serial @goField(forceResolver: true) showPassword(serialIDs: [ID!]) : ShowSerialPasswordResponse @goField(forceResolver: true) generateSerials(inputs: [SuggestSerialInput]): [SuggestSerial] @goField(forceResolver: true) } type SerialOps { lock(id: ID!, lockReason: SerialLockReasonInput): Boolean! @goField(forceResolver: true) unlock(id: ID!): Boolean! @goField(forceResolver: true) } input SuggestSerialInput { productID: ID! quantity: Int64! } type SuggestSerial { productID: ID! serials: [SerialGenerator!] } type SerialGenerator { serialID: ID! serialCode: String! } input SerialLockReasonInput { reason: String fileURLs: [String!] } type ShowSerialPasswordResponse { passwordBySerialID: [PasswordBySerialID!] } type PasswordBySerialID { serialID: ID! password: String } type HistoryImportAndExport { serialImportNoteItemID : ID serialImportNoteItem : SerialImportNoteItem @goField(forceResolver: true) serialExportNoteItemID : ID serialExportNoteItem : SerialExportNoteItem @goField(forceResolver: true) } enum SerialNoteType { SERIAL_EXPORT_NOTE SERIAL_IMPORT_NOTE } enum SerialEventType { LOCK UNLOCK CREATE EXPORT_STOCK } input SerialFilters { queries: [String!] productIDs: [ID!] orderIDs: [ID!] statuses: [SerialStatus!] serialTypes: [SerialType] = SERIAL warehouseID: ID providerIDs: [ID!] providerID: ID sellerIDs: [ID!] createdByIDs: [ID!] timeRange: TimeRangeFilter allowQueryAccurate: Boolean = false # allow query accurate field "queries" } enum SerialSortBy { ID CREATED_AT } input SerialSort { by: SerialSortBy = ID sortType: SortType! = DESC } type SerialsResponse { Serials: [Serial!] paginationData: PaginationData! } enum SerialType { SERIAL KEY_LICENSE ACCOUNT } type Serial { id: ID! code: String! @goField(forceResolver: true) codeDisplay: String password: String @goField(forceResolver: true) status: SerialStatus type: SerialType! productID: ID product: Product @goField(forceResolver: true) warrantyPeriodProvider: Int64 warrantyUnit: DatePeriodUnit copyrightTerm:Int64 copyrightUnit: CopyrightUnit soldDateFromProvider: Timestamp providerID: ID provider: Seller @goField(forceResolver: true) seller: Seller @goField(forceResolver: true) lockedReason: SerialReason @goField(forceResolver: true) history: [HistoryImportAndExport!] @goField(forceResolver: true) serialImportNoteItemLatest: SerialImportNoteItem @goField(forceResolver: true) serialExportNoteItemLatest: SerialExportNoteItem @goField(forceResolver: true) createdAt: Timestamp updatedAt: Timestamp createdByID: ID createdBy: User @goField(forceResolver: true) isMigrated: Boolean! migratedSerialData: [MigratedSerialData] @goField(forceResolver: true) } type SerialReason { eventType: SerialEventType! reason: String files: [String!] createdByID: ID! createdBy: User! @goField(forceResolver: true) createdAt: Timestamp updatedAt: Timestamp } type MigratedSerialData{ id: ID! serial: String! name: String! supplier: String! dateOfImport: Timestamp warrantyOnImportType: WarrantyType warrantyOnImportPeriod: Int64 warrantyOnImportPeriodUnit: DatePeriodUnit dateOfSale: Timestamp customerName: String customerEmail: String customerPhone: String warrantyOnSaleType: WarrantyType warrantyOnSalePeriod: Int64 warrantyOnSalePeriodUnit: DatePeriodUnit createdByID: ID createdByName: String branchName: String } type ShippingProviderQuery { list(ids: [ID!], isActive: Boolean): [ShippingProvider] @goField(forceResolver: true) shippingTypes: [ShippingType!] @goField(forceResolver: true) @deprecated (reason: "use getShippingTypes() instead") servicesFee(serviceFeeInput: GetShippingServiceFeeInput!): [ShippingMethodSupported] @goField(forceResolver: true) getShippingTypes(contactCityID: ID, exportedWarehouseID: ID): [ShippingTypeResponse!] @goField(forceResolver: true) } type ShippingProviderOps { updateOrderStatus(orderID: ID!): Boolean! @goField(forceResolver: true) updateShippingProvider(orderID: ID!, newShippingProviderID: ID!, newShipperID: ID): Boolean! @goField(forceResolver: true) } type ShippingProvider { id: ID! code: String! name: String logo_url: String! @deprecated getServiceFee(input: GetShippingFeeInput): [ShippingServiceFeeResponse] @goField(forceResolver: true) @staffSecured @deprecated getCartServiceFee(cartID: ID!): [ShippingServiceFeeResponse] @goField(forceResolver: true) @sellerSecured } type ShippingServiceFeeResponse { totalFee: Int64! code: String! name: String! } input GetShippingFeeInput { height: Int64 length: Int64 width: Int64 weight: Int64 fromCityId: ID fromDistrictId: ID fromWardId: ID toCityId: ID toDistrictId: ID toWardId: ID } enum ShippingProviderCode { GHN GHTK JT VIETTEL_POST AHAMOVE HA_EXPRESS } extend type ShippingProvider { fee: Int64! } enum CarrierMethod{ INSTANT STANDARD ECONOMY } input GetShippingServiceFeeInput { cartID: ID orderID: ID carrierMethods: [CarrierMethod] #emty meaning get all services } type ShippingMethodSupported{ method: CarrierMethod! carrierMinFee: Int64 carrierMaxFee: Int64 providers: [ShippingProvider!] } type ShippingTypeResponse { shippingType: ShippingType! isActive: Boolean! }type TransferOps { transfer( source: ID, target: ID, amount: Int64! description: String, fileUrls: [String!], transferType: BankTransferType orderID: ID, ): TransferMoneyResult! @goField(forceResolver: true) } enum BankTransferType { COMPANY_TO_COMPANY COMPANY_TO_PERSONAL PERSONAL_TO_PERSONAL PERSONAL_TO_COMPANY } type TransferMoneyResult { sourceWalletID: ID sourceWallet: Wallet @goField(forceResolver: true) sourceTransactionID: ID sourceTransaction: WalletTransaction @goField(forceResolver: true) targetWalletID: ID targetWallet: Wallet @goField(forceResolver: true) targetTransactionID: ID targetTransaction: WalletTransaction @goField(forceResolver: true) transferID: ID! transfer: WalletTransferItem! @goField(forceResolver: true) } type UserQuery { me: User @goField(forceResolver: true) get(id: ID!): User @goField(forceResolver: true) pagination(filters: UsersFilters, pagination: PaginationRequest, sort:[UserSort!]): UsersResponse @goField(forceResolver: true) hasPermission(permissions: [UserPermission!]!): HasPermissionResponse! @goField(forceResolver: true) } type SellerUserQuery { me: SellerUser @goField(forceResolver: true) #get current seller payment method getPaymentMethod: [SellerPaymentMethodResponse!] @goField(forceResolver: true) } type SellerPaymentMethodResponse { sellerPaymentMethod: PaymentMethod! enabled: Boolean! } type HasPermissionResponse { any: Boolean! all: Boolean! permissions: [UserPermission!] } type UserOps { create(request: CreateUserRequest!):User! @goField(forceResolver: true) delete(ids: [ID!] @binding(constraint: "min=1")): Boolean! @goField(forceResolver: true) update(request: UpdateUserRequest!):User! @goField(forceResolver: true) updateNotificationToken(token: String, removed: Boolean!=false, chatConversationID: Int64): Boolean! @goField(forceResolver: true) updateStatus(id: ID!, status: UserStatus!): UserStatus! @goField(forceResolver: true) updateUserRegion(regionID: ID! ): Boolean! @goField(forceResolver: true) } type SellerUserOps { updateRegion(regionID: ID!): Boolean! @goField(forceResolver: true) updateAvatar(avatarURL: String!): User! @goField(forceResolver: true) deleteMyAccount: Boolean! @goField(forceResolver: true) updateUserSelectedCity(cityID: ID! ): Boolean! @goField(forceResolver: true) } type SellerUser { id: ID! fullname: String! status: UserStatus! email: String! telephone: String! avatarURL: String sellerID: ID seller: Seller @goField(forceResolver: true) regionID: ID region: Region @goField(forceResolver: true) needChangePassword : Boolean selectedCityID: ID selectedCity: City @goField(forceResolver: true) } type TotalOrderDelivery { totalWaiting : Int64! totalDelivering : Int64! } # shipper extension extend type User { totalOrderDelivery : TotalOrderDelivery @goField(forceResolver: true) # if user is pm categoryIDs: [ID!] categories : [Category!] @goField(forceResolver: true) } input UserSort { by: UserSortBy! = ID userType: SortType! = DESC } enum UserSortBy { ID CREATED_AT TOTAL_DELIVERY } type User { id: ID! fullname: String! avatarURL: String email: String! telephone: String! address: String! wardID: ID ward: Ward @goField(forceResolver: true) districtID: ID district: District @goField(forceResolver: true) cityID: ID city: City @goField(forceResolver: true) selectedCityID: ID selectedCity: City @goField(forceResolver: true) status: UserStatus! departmentID: ID! roleIDs: [ID!] roles: [Role] @goField(forceResolver: true) hasRole(id:ID):Boolean! @goField(forceResolver: true) department: Department @goField(forceResolver: true) walletID: ID wallet: Wallet @goField(forceResolver: true) wallets: [Wallet!] @goField(forceResolver: true) permissions: [String!] @goField(forceResolver: true) senderContacts: [Contact!] @goField(forceResolver: true) totalCart: Int! @goField(forceResolver: true) sellerID: ID seller: Seller @goField(forceResolver: true) regionID: ID region: Region @goField(forceResolver: true) branchID: ID @deprecated branch: Branch @goField(forceResolver: true) @deprecated branchIDs : [ID!] branches: [Branch] @goField(forceResolver: true) needChangePassword : Boolean canUpdateProductPrice : Boolean type : UserType! } input CreateUserRequest { fullname: String! avatarURL: String email: String! telephone: String address: String wardID: ID districtID: ID cityID: ID departmentID: ID! roleIDs: [ID!] categoryIDs: [ID!] # raw password raw_password: String! branchIDs : [ID!]! } input UpdateUserRequest { id: ID! fullname: String! avatarURL: String email: String! telephone: String address: String wardID: ID districtID: ID cityID: ID departmentID: ID! roleIDs: [ID!] categoryIDs: [ID!] branchIDs : [ID!]! } type UsersResponse { users: [User] paginationData: PaginationData! } type Staff { id: ID! fullname: String! email: String! telephone: String address: String departmentID: ID roleIds: [ID!] department: Department @goField(forceResolver: true) createdAt: Timestamp! updatedAt: Timestamp! } enum UserStatus{ ACTIVE DISABLED DELETED } enum UserType { STAFF SELLER } enum UserPermission { WAREHOUSE_ACCOUNTANT # we only have this type for now ACCOUNTANT_BANK PRODUCT_VIEW PRODUCT_UPDATE PRODUCT_UPDATE_PRICE PRODUCT_VIEW_STOCK PRODUCT_ALL ORDER_ASSIGN_SHIPPER ORDER_SHIPPER_DELIVER SALE_REPORT_VIEW SALE_MANAGER_REPORT_VIEW CUSTOMER_CREATE } input UsersFilters { status: UserStatus # filter by user status departmentID: ID query: String # full text search ids: [ID!] # filter by id of users roleIDs: [ID!] # filter by roleIDs permission: UserPermission # filter by user's permission userType: UserType branchIDs : [ID!] hiddenUserTypes: [UserType!] } type WalletQuery { get(id: ID!): Wallet @goField(forceResolver: true) } enum WalletType { SELLER_PERSONAL SELLER_COMPANY SELLER_DEBT WAREHOUSE_ACCOUNTANT BANK_ACCOUNT } type Wallet { id: ID! balance: Int64! type: WalletType! sellerID: ID seller: Seller @goField(forceResolver: true) userID: ID user: User @goField(forceResolver: true) } type WalletTransactionQuery { get(id: ID!): WalletTransaction @goField(forceResolver: true) list(ids: [ID!]): [WalletTransaction!] @goField(forceResolver: true) pagination(filters: WalletTransactionFilters, pagination: PaginationRequest): TransactionsPagingResponse @goField(forceResolver: true) } enum WalletTransactionSourceType { WALLET_TRANSFER TOP_UP ORDER } type WalletTransaction { id: ID! # The amount of the transaction amount: Int64! walletID: ID! wallet: Wallet! @goField(forceResolver: true) transferType: BankTransferType sourceType :WalletTransactionSourceType! walletTransferID: ID walletTransfer: WalletTransferItem @goField(forceResolver: true) # time stamp createdAt: Timestamp! updatedAt: Timestamp! } enum TransactionType { TOP_UP# increase the balance PAYMENT# decrease the balance by pay for an order } enum MoneySource { # from the wallet WALLET # from the bank account BANK_ACCOUNT } input WalletTransactionFilters { # transaction type type: [TransactionType!] # source source: [MoneySource!] # wallet type walletType: [WalletType!] # time range: time range have higher priority than period timeRange: TimeRangeFilter # search by name/code query: String # period period: Period # seller transactions only -> true # accountant transactions only -> false sellerTransactionOnly: Boolean! } type TransactionsPagingResponse { transactions: [WalletTransaction!] paginationData: PaginationData! } type WalletTransferQuery { get(id: ID!): WalletTransferItem @goField(forceResolver: true) } type WalletTransferItem { id: ID! # The amount of the transfer item amount: Int64! # source: which wallet the money goes from; this can be null sourceWalletID: ID sourceWallet: Wallet @goField(forceResolver: true) # target: which wallet the money goes to targetWalletID: ID targetWallet: Wallet @goField(forceResolver: true) description: String # user action createdByID: ID createdBy: User @goField(forceResolver: true) # attachments fileURLs: [String!] # related order ID orderID: ID order: Order @goField(forceResolver: true) # time stamp createdAt: Timestamp! updatedAt: Timestamp! } type WarehouseQuery { list(request: WarehouseRequest) : WarehouseResponse @goField(forceResolver: true) } type Warehouse { id: ID! code: String! name: String! wardID: ID ward: Ward @goField(forceResolver: true) districtID: ID district: District @goField(forceResolver: true) cityID: ID city: City @goField(forceResolver: true) address: String regionID: ID region: Region @goField(forceResolver: true) branchID: ID branch: Branch @goField(forceResolver: true) type: WarehouseType! } input WarehouseRequest { ids: [ID!] # get warehouses by ids user_id: ID # get warehouses by user_id seller_id: ID # get warehouses by seller_id } type WarehouseResponse { warehouses: [Warehouse!] } enum WarehouseType { COMPANY_OWNED # Company-owned warehouse CONSIGNMENT # Consignment warehouse SUPPLIER # Supplier warehouse }type WarrantyNoteQuery { pagination(filters: WarrantyFilters, , pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[WarrantySort!] ) : WarrantyNoteResponse @goField(forceResolver: true) get(id : ID!):WarrantyNote @goField(forceResolver: true) histories(warrantyNoteID : ID!):[WarrantyNotesHistory!] @goField(forceResolver: true) } type WarrantyRequestQuery { get(id: ID!, filters: WarrantyRequestDetailFilters, sort: [WarrantyRequestDetailSort!]): WarrantyRequest @goField(forceResolver: true) getSerial(id: ID!): WarrantyRequestItem @goField(forceResolver: true) pagination(filters: WarrantyRequestFilters, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[WarrantyRequestSort!] ): WarrantyRequestResponse @goField(forceResolver: true) paginationSerial(filters: WarrantyRequestItemFilters, pagination: PaginationRequest! = {limit: 10, offset: 0} , sort :[WarrantyRequestSort!] ): WarrantyRequestItemResponse @goField(forceResolver: true) } type WarrantyRequestOps { create(request: WarrantyRequestInput): WarrantyRequest @goField(forceResolver: true) update(id: ID!, request: WarrantyRequestInput): Boolean! @goField(forceResolver: true) updateSerial(id: ID!, request: WarrantyRequestItemInput): Boolean! @goField(forceResolver: true) confirmCheck(warrantyRequestItemIDs: [ID!]): Boolean! @goField(forceResolver: true) confirmSolution(warrantyRequestItemIDs: [ID!], solution: WarrantyRequestItemSolution!, solutionRequest: SolutionRequestInput): Boolean! @goField(forceResolver: true) confirmDistribute(warrantyRequestItemIDs: [ID!], assignee: WarrantyRequestItemReceiveParty!, distributeRequest: DistributeRequestInput): Boolean! @goField(forceResolver: true) receiveResult(warrantyRequestItemID: ID!, confirmResultRequest: ConfirmResultInput!): Boolean! @goField(forceResolver: true) confirmReturn(warrantyRequestItemIDs: [ID!], shippingType: ShippingType!, shippingConfig: ShippingConfigInput): Boolean! @goField(forceResolver: true) complete(warrantyRequestItemID: ID!, deliverFileURLs: [String!]): Boolean! @goField(forceResolver: true) returnWaitingForCheck(warrantyRequestItemID: ID!): Boolean! @goField(forceResolver: true) exportFile(warrantyRequestID: ID!, warrantyRequestItemIDs: [ID!], noteType: WarrantyRequestNoteType!, fileType: ExportFileType!): FileType! @goField(forceResolver: true) @staffSecured } input SolutionRequestInput { reimportAmount: Int64 reimportDate: Timestamp reimportFileURLs: [String!] resultReceivedDate: Timestamp alternativeProductSerial: String alternativeProductName: String alternativeProductCode: String alternativeProductCategoryID: ID resultFileURLs: [String!] } input DistributeRequestInput { receivePartyName: String receivePartyPhone: String receivePartyAddress: String warrantySendDate: Timestamp distributeShippingType: ShippingType distributeShippingConfig: ShippingConfigInput technicalStaffID: ID } enum WarrantyRequestNoteType { RECEIVE_NOTE RETURN_NOTE BORROW_NOTE } type WarrantyNotesHistory { warrantyRequestID : ID! createdAt : Timestamp code : String! customerName : String! customerPhone : String! errorDescription : String warrantyResult : WarrantyRequestItemResult status : WarrantyRequestItemStatus! solution : String receivePartyName : String alterProductSerial : String oldSerial : String receiveParty : WarrantyRequestItemReceiveParty technicalStaffID : ID technicalStaff: User @goField(forceResolver: true) } input DeclineWarrantyInput { defaultReason: DeclineWarrantyReason freeText: String } enum DeclineWarrantyReason { EXPIRED #+ Sản phẩm đã hết hạn bảo hành. NOT_BELONG_HA #+ Sản phẩm không phải của Hồng Anh. USER_FAULT #+ Lỗi xuất phát từ người dùng.#+ Khác } input ConfirmResultInput { result: WarrantyRequestItemResult! brandResult: WarrantyRequestItemResult! resultReceivedDate: Timestamp! alternativeProductSerial: String alternativeProductName: String alternativeProductCode: String alternativeProductCategoryID: ID receiveAmount: Int64 returnAmount: Int64 brandReturnAmount: Int64 declineReason : DeclineWarrantyInput note : String repairAccessoryName: String alternativeAccessoryName: String alternativeAccessoryStatus: String repairCost: Int64 resultFileURLs: [String!] } input WarrantyFilters{ query : String status : [WarrantyStatus] types : [WarrantyType] serials: [String!] ids: [ID!] } enum WarrantyStatus{ STILL_VALIDATED INVALIDATED EXPIRED NOT_EXIST #Warranty note does not exist. } enum WarrantyType { INTERNAL #nội bộ MANUFACTURE #bảo hành hãng CUSTOM #tùy chỉnh (hiển thị thời gian) STAMP #Tem phiếu } enum WarrantyNoteSort{ ID CREATED_AT } input WarrantySort { by: WarrantyNoteSort = ID sortType: SortType! = DESC } type WarrantyNoteResponse { noteWarranty: [WarrantyNote!] paginationData: PaginationData! } type WarrantyNote { id : ID! code : String! #tên phiếu bảo hành serialImei : String! #serial và imei productName : String customerName : String supplierName : String #mã sp , tên sp productID : ID product: Product @goField(forceResolver: true) #tên ngành hàng categoryID : ID category: Category @goField(forceResolver: true) #mã đơn hàng , hình thức giao vận orderID : ID order : Order @goField(forceResolver: true) #tên đại lý , sđt , địa chỉ sellerID: ID seller: Seller @goField(forceResolver: true) #todo nhà cung cấp providerID : ID provider : Seller @goField(forceResolver: true) # chi nhánh branchID : ID branch: Branch @goField(forceResolver: true) serialID : ID serial : Serial @goField(forceResolver: true) #hình thức bảo hành hãng , nội bộ , tùy chỉnh (hiển thị thời gian) warrantyType : WarrantyType! # trạng thái có hiệu lực , vô hiệu , hết hiệu lực status: WarrantyStatus! #ngày bán hàng soldDate : Timestamp #bảo hành khi bán warrantyOnSale : Int64 #hạn bảo hàng khi bán warrantyEndDate : Timestamp warrantyDateUnit : DatePeriodUnit #thời gian còn lại kể từ ngày bán hàng đến hạn bảo hành remainingWarrantyDays : Int64 #ngày nhập từ nhà cung cấp importDayFromProvider : Timestamp #bảo hành từ nhà cung cấp warrantyPeriodProviders : Int64 # ngày hết hạn bảo hành từ nhà cung cấp endDateFromProvider: Timestamp providerDateUnit : DatePeriodUnit remainingWarrantyDaysFromProvider : Int64 isMigrated: Boolean! migratedSerialData: [MigratedSerialData] @goField(forceResolver: true) createdAt : Timestamp #ngày tạo phiếu updatedAt : Timestamp #ngày phiếu được cập nhật } type WarrantyRequest { id: ID! items(filters: WarrantyRequestDetailFilters, sort: [WarrantyRequestDetailSort!]): [WarrantyRequestItem] @goField(forceResolver: true) code: String! warrantyCustomerName: String! warrantyCustomerPhone: String! warrantyCustomerAddress: String! warrantyReceiveMethod: WarrantyReceiveMethod! branchID: ID! branch: Branch @goField(forceResolver: true) note: String totalItems: Int64! totalItemsByStatus : TotalWarrantyRequestItemByStatus @goField(forceResolver: true) createdByID: ID! createdBy: User @goField(forceResolver: true) createdAt: Timestamp status: WarrantyRequestStatus! updatedAt: Timestamp updatedByID: ID! updatedBy: User @goField(forceResolver: true) } type TotalWarrantyRequestItemByStatus { all: Int64! waitingForCheck: Int64! checking: Int64! waitingForDistribute: Int64! repairing: Int64! waitingForReturn: Int64! delivering: Int64! completed: Int64! canceled: Int64! } type WarrantyRequestResponse { warrantyRequests: [WarrantyRequest!] paginationData: PaginationData! } enum WarrantyReceiveMethod { BUS SHIPPING_PROVIDER SHIPPER CUSTOMER_BRING } enum WarrantyRequestStatus { WAITING_FOR_PROCESS PROCESSING COMPLETED CANCELED } type WarrantyRequestItem { id: ID! warrantyNoteID: ID warrantyNote: WarrantyNote @goField(forceResolver: true) warrantyRequestID: ID! warrantyRequest: WarrantyRequest @goField(forceResolver: true) serial : String! productName : String! productType : WarrantyProductType! warrantyRequestType : WarrantyRequestType! productID : ID product: Product @goField(forceResolver: true) categoryID : ID promisedReturnDate : Timestamp! delayReturnTimeRange: Int64! accessoryAttachment : String itemAmount : Int64 customerRequest: String defectDescription : String imageURLs : [String!] status: WarrantyRequestItemStatus! fullEvents: [FullEvent] @goField(forceResolver: true) solution: WarrantyRequestItemSolution shippingType: ShippingType shippingConfig: ShippingConfiguration receiveParty: WarrantyRequestItemReceiveParty receivePartyName: String receivePartyPhone: String receivePartyAddress: String warrantySendDate: Timestamp distributeShippingType: ShippingType distributeShippingConfig: ShippingConfiguration technicalStaffID: ID technicalStaff: User @goField(forceResolver: true) # result after confirm warranty from parties result: WarrantyRequestItemResult brandResult : WarrantyRequestItemResult resultReceivedDate: Timestamp alternativeProductSerial: String alternativeProductName: String alternativeProductCode: String alternativeProductCategoryID: ID alternativeProductCategory: Category @goField(forceResolver: true) receiveAmount: Int64 returnAmount: Int64 brandReturnAmount : Int64 resultNote : String repairAccessoryName: String alternativeAccessoryName: String alternativeAccessoryStatus: String repairCost: Int64 reimportAmount: Int64 reimportDate: Timestamp reimportFileURLs: [String!] resultFileURLs: [String!] deliverFileURLs: [String!] isCancel: Boolean! sendNoteNumber: String! @goField(forceResolver: true) declineReason : String declineFileURLs : [String!] oldSerial : String createdAt: Timestamp! } enum WarrantyRequestItemSolution { PROVIDER # Gửi bảo hành tại NCC| Hãng THIRD_PARTY # Gửi sửa chữa bên thứ ba SELF # Hồng Anh tự bảo hành NEGOTIATE_RE_IMPORT @deprecated # Thương lượng nhập lại ONE_TO_ONE @deprecated # Bảo hành 1 đổi 1 FOREIGN_WARRANTY } type FullEvent { state: FullEventState! name: String! createdAt: Timestamp createdByID: ID createdBy: User @goField(forceResolver: true) } enum FullEventState { FUTURE CURRENT PAST } enum WarrantyProductType { OWNER NOT_OWNER } enum WarrantyRequestType { SELF BEHALF # todo remove WARRANTY HOUSEHOLD_WARRANTY } enum WarrantyRequestItemStatus { WAITING_FOR_CHECK CHECKING WAITING_FOR_DISTRIBUTE REPAIRING WAITING_FOR_RETURN DELIVERING COMPLETED CANCELED } enum WarrantyRequestItemEventType { CREATE CONFIRM_CHECK CONFIRM_SOLUTION CONFIRM_DISTRIBUTE RECEIVE_RESULT CONFIRM_RETURN CONFIRM_DELIVER COMPLETE CANCEL BACK_TO_WAITING_CHECK } type WarrantyRequestItemEvent { id: ID! warrantyRequestItemID: ID eventType: WarrantyRequestItemEventType! warrantyRequestItem: WarrantyRequestItem! @goField(forceResolver: true) createdByID: ID createdBy: User @goField(forceResolver: true) note: String createdAt: Timestamp updatedAt: Timestamp } type WarrantyRequestItemResponse { totalItemByStatus : TotalWarrantyRequestItemByStatus @goField(forceResolver: true) warrantyRequestItems: [WarrantyRequestItem!] paginationData: PaginationData! } input WarrantyRequestFilters { query: String totalItem: RangeFilter createdByID: [ID!] status: [WarrantyRequestStatus!] warrantyRequestCategoryFilter: WarrantyRequestCategoryFilter branchIDs: [ID!] warrantyRequestIDs: [ID!] } input WarrantyRequestDetailFilters { query: String itemSolutions: [WarrantyRequestItemSolution!] warrantyRequestTypes: [WarrantyRequestType!] itemStatuses: [WarrantyRequestItemStatus!] warrantyRequestCategoryFilter: WarrantyRequestCategoryFilter } input WarrantyRequestSort { by: WarrantyRequestSortBy! = CREATED_AT sortType: SortType! = DESC } enum WarrantyRequestSortBy { CREATED_AT } input WarrantyRequestDetailSort { by: WarrantyRequestDetailSortBy! = UPDATED_AT sortType: SortType! = DESC } enum WarrantyRequestDetailSortBy { UPDATED_AT PROMISE_RETURN_DATE } input WarrantyRequestItemFilters { query: String createdByID: [ID!] status: [WarrantyRequestItemStatus!] warrantyNoteStatuses: [WarrantyStatus!] solutions: [WarrantyRequestItemSolution!] warrantyRequestTypes: [WarrantyRequestType!] warrantyResults: [WarrantyRequestItemResult!] shippingType: [ShippingType!] productIDs : [ID!] warrantyRequestCategoryFilter: WarrantyRequestCategoryFilter branchIDs: [ID!] warrantyRequestIDs: [ID!] } input WarrantyRequestInput { warrantyCustomerName: String warrantyCustomerPhone: String warrantyCustomerAddress: String warrantyReceiveMethod: WarrantyReceiveMethod branchID: ID note: String items: [WarrantyRequestItemInput!] } input WarrantyRequestItemInput { warrantyNoteID: ID serialImei: String productName: String warrantyProductType: WarrantyProductType warrantyRequestType: WarrantyRequestType productID: ID categoryID: ID promisedReturnDate: Timestamp accessoryAttachment: String itemAmount: Int64 customerRequest: String defectDescription: String imageURLs: [String!] solution: WarrantyRequestItemSolution sendNoteID: ID receivePartyName: String receivePartyPhone: String receivePartyAddress: String warrantySendDate: Timestamp shippingType: ShippingType shippingConfiguration: ShippingConfigInput technicalStaffID: ID technicalStaffPhone: String result: WarrantyRequestItemResult alternativeProductSerial: String alternativeProductName: String alternativeProductCode: String alternativeProductCategoryID: ID receiveAmount: Int64 returnAmount: Int64 reimportAmount: Int64 repairAccessoryName: String alternativeAccessoryName: String alternativeAccessoryStatus: String repairCost: Int64 resultFileURLs: [String!] } enum WarrantyRequestItemResult { RENEW @deprecated#+ Thay thế sản phẩm bảo hành PROVIDER_RE_IMPORT_HA_REIMPORT @deprecated #+ Bên bảo hành nhập lại, Hồng Anh nhập lại PROVIDER_RE_IMPORT_HA_RENEW @deprecated #+ Bên bảo hành nhập lại, Hồng Anh thay thế REPAIR_ACCESSORY @deprecated #+ Sửa chữa/ thay thế linh kiện DONE CANCEL EXCHANGE_SIMILAR_PRODUCT REIMPORT RENEW_SAME_PRODUCT } enum WarrantyRequestItemReceiveParty { PROVIDER #+ Giao cho NCC| Hãng THIRD_PARTY #+ Giao cho bên thứ ba TECHNICAL_STAFF #+ Giao cho Nhân viên kỹ thuật (HA) } enum WarrantyRequestCategoryFilter { WARRANTY_REQUEST #+ Bảo hành WARRANTY_REQUEST_HELP #+ Bảo hành hộ }type WithdrawMoneyRequestQuery { get(id: ID!): WithdrawMoneyRequest @goField(forceResolver: true) pagination( filters: WithdrawMoneyRequestFilters, sort :[WithdrawMoneyRequestSort!] = {by: ID , sortType: DESC}, pagination: PaginationRequest! = {limit: 100, offset: 0}, ): WithdrawMoneyRequestResponse @goField(forceResolver: true) } type WithdrawMoneyRequestSellerQuery { get(id: ID!): WithdrawMoneyRequest @goField(forceResolver: true) pagination( filters: WithdrawMoneyRequestSellerFilters, pagination: PaginationRequest! = {limit: 100, offset: 0}, ): WithdrawMoneyRequestResponse @goField(forceResolver: true) } # see services/fulfillment_be/docs/money_withdraw_requests.md for statuses, actions type WithdrawMoneyRequestOps { # if and only if the current status is CREATED or PROCESSING; the next status is always PROCESSING assign(request: WithdrawMoneyRequestAssignInput): Boolean! @goField(forceResolver: true) # reject by head-accountant or the assigned accountant reject(request: WithdrawMoneyRequestRejectInput): Boolean! @goField(forceResolver: true) # update by assigned accountant only finish(request: WithdrawMoneyRequestFinishInput): Boolean! @goField(forceResolver: true) # update(request:WithdrawMoneyRequestUpdateInput) : Boolean! @goField(forceResolver: true) } input WithdrawMoneyRequestUpdateInput { #todo lam requestID : ID } type WithdrawMoneyRequestSellerOps { # đại lý tạo yêu cầu create(request: WithdrawMoneyRequestCreateInput): WithdrawMoneyRequest! @goField(forceResolver: true) # đại lý hủy yêu cầu cancel(requestID : ID!): Boolean! @goField(forceResolver: true) } input WithdrawMoneyRequestCancelInput { requestID: ID! # the request we want to update reason: String! = "" # an optional reason } input WithdrawMoneyRequestRejectInput { requestID: ID! # the request we want to update reason: String! = "" # an optional reason } input WithdrawMoneyRequestAssignInput { requestID: ID! # the request we want to update assignTo: ID! # assign this request to some account } input WithdrawMoneyRequestFinishInput { requestID: ID! # the request we want to update fileURLs: [String!] # the evidence of success reason : String amountSpent : Int64! bankAccountantID : ID! #tk của kế toán } input WithdrawMoneyRequestCreateInput { amount: Int64! targetBankAccountID: ID! } input WithdrawMoneyRequestFilters { query : String accountantIDs: [ID!] timeRange : TimeRangeFilter sellerIDs : [ID!] status: [WithdrawMoneyRequestStatus!] } input WithdrawMoneyRequestSellerFilters { timeRange : TimeRangeFilter status: [WithdrawMoneyRequestStatus!] } enum WithdrawMoneyRequestStatus { CREATED CANCELED PROCESSING DONE REJECTED } input WithdrawMoneyRequestSort { by: WithdrawMoneyRequestSortBy! = CREATED_AT sortType: SortType! = DESC } enum WithdrawMoneyRequestSortBy { CREATED_AT ID } type WithdrawMoneyRequestResponse { withdrawMoneyRequests: [WithdrawMoneyRequest!] paginationData: PaginationData! } type WithdrawMoneyRequest { id: ID! amountWithdraw: Int64 # số tiền đại lý muốn rút amountSpent : Int64 # số tiền kế toán chuyền cho đại lý createdBySellerID: ID!, CreatedSellerBy: Seller @goField(forceResolver: true) # tkhoan của đại lý targetBankID: ID, TargetAccountBank: Bank @goField(forceResolver: true) # ngân hàng của đại lý targetBankAccountName: String! # bank account đại lý targetBankAccountNumber: String! # bank account đại lý accountantBankID : ID , accountantBank : BankAccount @goField(forceResolver: true) accountantBankAccountName: String # bank account kế toán accountantBankAccountNumber: String # bank account kế toán assignedAccountantID: ID, AssignedAccountant:User @goField(forceResolver: true) # tkhoan kế toán status: WithdrawMoneyRequestStatus!, # trạng thái events: [WithdrawMoneyRequestEvent!] @goField(forceResolver: true) reason : String # lý do từ chối , lý do chi tiền fileURLs: [String!] # chi tiết giao dịch createdAt: Timestamp updatedAt: Timestamp } enum WithdrawMoneyRequestEventType { CREATE CANCEL ASSIGN PROCESS FINISH REJECT } type WithdrawMoneyRequestEvent { id: ID! # the ID of WithdrawMoneyRequestEvent requestID: ID!, request: WithdrawMoneyRequest! @goField(forceResolver: true) createdByID: ID!, CreatedBy: User! @goField(forceResolver: true) type: WithdrawMoneyRequestEventType! previousStatus: WithdrawMoneyRequestStatus nextStatus: WithdrawMoneyRequestStatus fileUrls: [String!] note: String createdAt: Timestamp! updatedAt: Timestamp! }